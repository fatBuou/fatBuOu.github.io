<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哟，一个大面团</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://damiantuan.xyz/"/>
  <updated>2018-04-05T03:57:42.907Z</updated>
  <id>http://damiantuan.xyz/</id>
  
  <author>
    <name>PG-55</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用python检测窗体状态</title>
    <link href="http://damiantuan.xyz/2018/04/05/%E7%94%A8python%E6%A3%80%E6%B5%8B%E7%AA%97%E4%BD%93%E7%8A%B6%E6%80%81/"/>
    <id>http://damiantuan.xyz/2018/04/05/用python检测窗体状态/</id>
    <published>2018-04-05T03:01:46.000Z</published>
    <updated>2018-04-05T03:57:42.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前的文章说了在做客户端的爬虫的时候我们需要对爬取的应用程序进行进程的监控，对出现的异常进行处理。后面又发现，其实在Windows上，窗体和进程的似乎没有什么关系（不知道对不对，比较对Windows的图形化不是很熟悉，错了请指正），就是进程一直都是很正常的，但是窗体可能出现未响应的情况。这个问题我想大家其实都遇过，电脑卡的时候，点击一个窗口，然后窗口卡了一下，再点击的时候整个窗口就变白了，然后在左上角跳出一个窗体未响应的提醒。就是这个样子的。<br>！<a href="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522908316336&amp;di=b97580d04537425c7a796ed665315281&amp;imgtype=0&amp;src=http%3A%2F%2Fwenwen.soso.com%2Fp%2F20100130%2F20100130122717-272976562.jpg" target="_blank" rel="external">image</a></p><p>这个其实涉及的知识点蛮多的，首先是win32方面的只是，然后还有mfc方面的知识，最后其实才是python方面的处理。我在网上找到了一个相应的文章<a href="https://www.cnblogs.com/icepng/p/5975168.html" target="_blank" rel="external">判断窗体是否无响应</a>，但是可能是我的水平不够高吧，对于一些解决方法看得云里雾里的。在着手解决的时候，自己old school的思维风格又占据了上风，强行要使用Windows系统进行窗体状态的监测，毕竟mfc这东西就是你Windows提出来的，不依靠你自身解决依靠谁。</p><p>在Windows方面，python给出的资料确实有点少得可怜，我也是到处收集到一点代码片段，再慢慢组合起来，慢慢的摸索的，连猜带蒙写出来的，其实我给出的代码我自己本身也还是有挺多的不清错的地方，就希望有这方面的大神可以给点参考。</p><p>还是写成了模块，对于工作上的信息进行了隐匿。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> win32com.client</div><div class="line"><span class="keyword">import</span> win32api</div><div class="line"><span class="keyword">import</span> win32gui</div><div class="line"><span class="keyword">import</span> win32process</div><div class="line"><span class="keyword">import</span> win32pdh</div><div class="line"><span class="keyword">import</span> ctypes</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">该模块为了解决客户端在爬取数据的时候的窗体未响应问题</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listen_gui_status</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_gui</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># junk是CPU的一些运行字段，instances是所有的进程名称，类型为list</span></div><div class="line">        junk, instances = win32pdh.EnumObjectItems(<span class="keyword">None</span>, <span class="keyword">None</span>,<span class="string">'process'</span>, win32pdh.PERF_DETAIL_WIZARD)</div><div class="line">        <span class="comment"># print(instances)</span></div><div class="line">        proc_ids=[]</div><div class="line">        proc_dict=&#123;&#125;</div><div class="line">        ubank_proc=<span class="keyword">None</span></div><div class="line">        <span class="keyword">for</span> instance <span class="keyword">in</span> instances:</div><div class="line">            <span class="keyword">if</span> instance <span class="keyword">in</span> proc_dict:</div><div class="line">            proc_dict[instance] = proc_dict[instance] + <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            proc_dict[instance]=<span class="number">0</span></div><div class="line">            <span class="comment"># print(proc_dict)</span></div><div class="line">            <span class="comment"># print(proc_dict.items())</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> instance, max_instances <span class="keyword">in</span> proc_dict.items():    <span class="comment"># 此段方法是统计同名进程有多少个</span></div><div class="line">            <span class="keyword">for</span> inum <span class="keyword">in</span> range(max_instances+<span class="number">1</span>):</div><div class="line">            <span class="comment"># PdhOpenQuery：获取性能监视器数据查询句柄，返回一个句柄</span></div><div class="line">                hq = win32pdh.OpenQuery()</div><div class="line">                <span class="string">'''</span></div><div class="line"><span class="string">                MakeCounterPath:使用PDH_COUNTER_PATH_ELEMENTS结构中指定的成员创建一个完整的计数器路径。</span></div><div class="line"><span class="string">                如果函数成功，则返回ERROR_SUCCESS。</span></div><div class="line"><span class="string">                如果函数失败，返回值是系统错误代码或PDH错误代码</span></div><div class="line"><span class="string">                '''</span></div><div class="line">                path = win32pdh.MakeCounterPath( (<span class="keyword">None</span>,<span class="string">'process'</span>,instance, <span class="keyword">None</span>, inum,<span class="string">'ID Process'</span>) )</div><div class="line">                print(<span class="string">'inum'</span>,inum,<span class="string">'hq'</span>,hq,<span class="string">'path'</span>,path)</div><div class="line">                </div><div class="line">                <span class="comment"># PdhAddCounter:添加计数器</span></div><div class="line">                counter_handle=win32pdh.AddCounter(hq, path)</div><div class="line">                <span class="comment"># CollectQueryData:收集指定查询中所有计数器的当前原始数据值，并更新每个计数器的状态码。</span></div><div class="line">                win32pdh.CollectQueryData(hq)</div><div class="line">                <span class="comment"># GetFormattedCounterValue：获取指定计数器数值</span></div><div class="line">                types, val = win32pdh.GetFormattedCounterValue(counter_handle, win32pdh.PDH_FMT_LONG)</div><div class="line">                proc_ids.append((instance,str(val)))</div><div class="line">                win32pdh.CloseQuery(hq)</div><div class="line">                proc_ids.sort()</div><div class="line">        <span class="keyword">for</span> proc_name <span class="keyword">in</span> proc_ids:</div><div class="line">            <span class="keyword">if</span> proc_name[<span class="number">0</span>]==<span class="string">u'QQ.exe'</span>:</div><div class="line">                ubank_proc=proc_name[<span class="number">1</span>]</div><div class="line">                <span class="comment"># print(proc_name[1])</span></div><div class="line"></div><div class="line">        hWndList = []</div><div class="line">        qq_hWnd=[]</div><div class="line">        <span class="comment"># 获取窗口句柄</span></div><div class="line">        win32gui.EnumWindows(<span class="keyword">lambda</span> hWnd, param: param.append(hWnd), hWndList)</div><div class="line">        <span class="comment"># print ('------------------------------')</span></div><div class="line">        <span class="comment"># print  (hWndList)</span></div><div class="line">        <span class="comment"># print ('------------------------------')</span></div><div class="line">        <span class="comment"># 迭代</span></div><div class="line">        <span class="keyword">for</span> hWnd <span class="keyword">in</span> hWndList:</div><div class="line">            <span class="comment"># 获取窗口句柄对应的线程ID和进程ID</span></div><div class="line">            threadId, process_id = win32process.GetWindowThreadProcessId(hWnd)</div><div class="line">            <span class="keyword">if</span> process_id==int(ubank_proc):</div><div class="line">                <span class="comment"># print(threadId, process_id,hWnd)</span></div><div class="line">                ubank_hWnd.append(hWnd)</div><div class="line">        <span class="keyword">for</span> hWnd <span class="keyword">in</span> qq_hWnd:</div><div class="line">            <span class="string">'''</span></div><div class="line"><span class="string">            关于IsHungAppWindow(),Microsoft官方给出的解释是：</span></div><div class="line"><span class="string">            The return value is TRUE if the window stops responding; otherwise, it is FALSE. Ghost windows always return TRUE.</span></div><div class="line"><span class="string">            具体可以查看https://msdn.microsoft.com/en-us/library/windows/desktop/ms633526(v=vs.85).aspx</span></div><div class="line"><span class="string">            '''</span></div><div class="line">            status = ctypes.windll.user32.IsHungAppWindow(hWnd)</div><div class="line">            <span class="keyword">if</span> status:</div><div class="line">                time.sleep(<span class="number">30</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    Listen_gui_status.check_gui()</div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前的文章说了在做客户端的爬虫的时候我们需要对爬取的应用程序进行进程的监控，对出现的异常进行处理。后面又发现，其实在Windows上，窗体和进程的似乎没有什么关系（不知道对不对，比较对Windows的图形化不是很熟悉，错了请指正），就是进程一直都是
      
    
    </summary>
    
      <category term="python win32" scheme="http://damiantuan.xyz/categories/python-win32/"/>
    
    
      <category term="python 爬虫 mfc" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB-mfc/"/>
    
  </entry>
  
  <entry>
    <title>用python检测进程状态</title>
    <link href="http://damiantuan.xyz/2018/04/05/%E7%94%A8python%E6%A3%80%E6%B5%8B%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>http://damiantuan.xyz/2018/04/05/用python检测进程状态/</id>
    <published>2018-04-05T01:11:52.000Z</published>
    <updated>2018-04-05T03:00:30.793Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们很多时候做客户端爬虫的时候，或者是在Windows上做项目的时候，我们都需要对目标进程进行监控，在目标进程出现异常的时候对我们的爬虫进行相应的异常处理。</p><p>当时做这个的时候思路比较局限，可能是因为自己old school风格的原因吧，就想着怎么去做Windows编程，去请求系统的API，后面发现如果是去请求系统的API的话，第一是过程比较复杂，第二是在python方面，对Windows的一些介绍也比较少，像win32，win32api之类的，很多资料都不齐全，因为这些资料很多时候是面对有Windows编程有需要，或是对Windows编程比较有经验的人用的，入门的比较少。</p><p>后面搞的时候还是请教了一些大佬，其中一个搞安全的大佬给了一个思路，你试试用安全的角度去考虑这个功能的实现。也要感谢自己当时在安全的路上跌跌撞撞的走过几年吧，这样一样就有了一个解决的思路，虽然比较猥琐，做了一下搬砖的工作，还是比较快解决的。用到了一个名叫psutil的模块。更多的详情，可以参考psutil的github主页<a href="https://github.com/giampaolo/psutil" target="_blank" rel="external">psutil</a>，功能还是很多很强大的。</p><p>惯例，直接上代码，代码注释非常的清晰。因为这个是工作中用到的一个模块，我用类进行了封装。对于进程名，因为工作问题我隐去了，换成了一个QQ的进程。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"><span class="comment"># _by:lam</span></div><div class="line"></div><div class="line"><span class="keyword">import</span>  psutil</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listen_from_status</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    该模块为了解决客户端在爬取数据的时候的进程异常的问题</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># name为需要监测进程名</span></div><div class="line">        name = <span class="string">'QQ.exe'</span></div><div class="line">        <span class="comment"># 获取系统此时所有的进程名字，进程pid，进程开始时间</span></div><div class="line">        <span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</div><div class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> proc.name():</div><div class="line">                <span class="comment"># psutil.Process()这个函数接收一个进程pid作为参数，获取进程的信息，开始时间，进程名等</span></div><div class="line">                p = psutil.Process(proc.pid)</div><div class="line">                <span class="comment"># 判断进程的状态</span></div><div class="line">                <span class="keyword">if</span> p.status() == psutil.STATUS_RUNNING:</div><div class="line">                    <span class="keyword">pass</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    time.sleep(<span class="number">30</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    Listen_from_status.listen()</div></pre></td></tr></table></figure><blockquote><p>psutil中定义的进程的状态有这几种，当然，我们也可以用字符串去代替他的状态情况。状态的字符串就是STATUS_后面的名字换成小写字母即可。（）中提示的是适用的系统。</p></blockquote><p>psutil.STATUS_RUNNING</p><p>psutil.STATUS_SLEEPING</p><p>psutil.STATUS_DISK_SLEEP</p><p>psutil.STATUS_STOPPED</p><p>psutil.STATUS_TRACING_STOP</p><p>psutil.STATUS_ZOMBIE</p><p>psutil.STATUS_DEAD</p><p>psutil.STATUS_WAKE_KILL</p><p>psutil.STATUS_WAKING</p><p>psutil.STATUS_IDLE(OSX, FreeBSD)</p><p>psutil.STATUS_LOCKED(FreeBSD)</p><p>psutil.STATUS_WAITING(FreeBSD)</p><p>psutil.STATUS_SUSPENDED(NetBSD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们很多时候做客户端爬虫的时候，或者是在Windows上做项目的时候，我们都需要对目标进程进行监控，在目标进程出现异常的时候对我们的爬虫进行相应的异常处理。&lt;/p&gt;
&lt;p&gt;当时做这个的时候思路比较局限，可能是因为自己old school风格的原因吧
      
    
    </summary>
    
      <category term="python 爬虫 Windows" scheme="http://damiantuan.xyz/categories/python-%E7%88%AC%E8%99%AB-Windows/"/>
    
    
      <category term="python,爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python模拟登录某网教师教育网</title>
    <link href="http://damiantuan.xyz/2018/04/03/Python%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E6%9F%90%E7%BD%91%E6%95%99%E5%B8%88%E6%95%99%E8%82%B2%E7%BD%91/"/>
    <id>http://damiantuan.xyz/2018/04/03/Python模拟登陆某网教师教育网/</id>
    <published>2018-04-03T08:11:52.000Z</published>
    <updated>2018-04-05T04:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自看雪论坛【作者】rdsnow</p><p>不得不说，最近的 Python 蛮火的，我也稍稍了解了下，并试着用 Python 爬取网站上的数据</p><p>不过有些数据是要登陆后才能获取的，我们每年都要到某教师教育网学习一些公需科目，就拿这个网站试试，关键是对网站的分析</p><p>打开浏览器，输入网站网址 <a href="http://www.jste.net.cn" target="_blank" rel="external">http://www.jste.net.cn</a> ，按F12调出浏览器的开发者工具，选中 Network ，并勾选 Preserve log，防止切换网页时信息丢失</p><p><img src="http://image.3001.net/images/20180402/15226536367045.png!small" alt="image"></p><p>网页上输入账号，密码输入“123456”，验证码输入“abcde”，验证码不要输正确的，否则密码错5次，会被网站锁定账号30个小时，验证码倒是可以随便错</p><p>登陆后（当然登陆不上，会跳转到另一个登陆页面），在开发者工具中看到与服务器的数据交换</p><p><img src="http://image.3001.net/images/20180402/15226536524277.png!small" alt="image"></p><p>第一个是get验证码图片的，第二个就是向网站提交数据的，点一下第二个信息</p><p><img src="http://image.3001.net/images/20180402/15226536672402.png!small" alt="image"></p><p>这是个 Post 请求，重点看红框中的提交数据，randomCode就是输入的验证码了，x,y应该是点击的按钮控件的位置了，有cookie后就没有提交这个数据了，可以忽视，returnURL、appId，encrypt每次都是一样的，也不用管他，重点是 reqId 和 req 这两个 key 的值了，reqId猜想是点击按钮时取到的时间戳，可以复制这个数据到验证下 Unix时间戳(Unix timestamp)转换工具 单位选毫秒，确实是刚刚提交数据的时间，就剩下一个数据了，这个key的数值很长，下面来寻找这个数据是从哪里的来的</p><p>可以看到 login.jsp 下可以看到 encode.js、string.js、des.js 从名字上就能看出这几个是用来加密提交数据的，右键 login.jsp，选择 “Open in Sources panel”</p><p><img src="http://image.3001.net/images/20180402/15226537006674.png!small" alt="image"></p><p><img src="http://image.3001.net/images/20180402/15226537232555.png!small" alt="image"></p><p>可以跳转到 “源” 选项卡，看到 ’login.jsp‘ 的源码，如果格式混乱，比如所有代码在一行中，不便于观看，可以点击界面下方</p><p><img src="http://image.3001.net/images/20180402/15226538607653.png!small" alt="image"></p><p>的中括号，开发者工具会自动给你重新格式化代码。</p><p>仔细分析 login.jsp 的代码，看到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doOk</span>(<span class="params">frm</span>) </span>&#123;</div><div class="line"> </div><div class="line"> </div><div class="line">            <span class="keyword">var</span> el = frm.elements[<span class="string">"loginName"</span>];</div><div class="line">            <span class="keyword">var</span> loginName = el.value.replace(<span class="regexp">/ /g</span>, <span class="string">""</span>);</div><div class="line">            el.value = loginName;</div><div class="line">            <span class="keyword">if</span> (isEmpty(loginName)) &#123;</div><div class="line">                alert(<span class="string">"请输入登录名"</span>);</div><div class="line">                el.focus();</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line"> </div><div class="line">            el = frm.elements[<span class="string">"pwd"</span>];</div><div class="line">            el.value = el.value.replace(<span class="regexp">/ /g</span>, <span class="string">""</span>);</div><div class="line">            <span class="keyword">var</span> pwd=el.value;</div><div class="line">            <span class="keyword">if</span> (isEmpty(el.value)) &#123;</div><div class="line">                alert(<span class="string">"请输入登录密码"</span>);</div><div class="line">                el.focus();</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"> </div><div class="line">            pwd = encode(loginName, pwd);<span class="comment">//密码第一次加密，可以跟进</span></div><div class="line">            frm.elements[<span class="string">"encrypt"</span>].value = <span class="string">"1"</span>;</div><div class="line"> </div><div class="line">            <span class="keyword">var</span> validCode=<span class="string">""</span>;</div><div class="line">            el=frm.elements[<span class="string">"randomCode"</span>];</div><div class="line">            <span class="keyword">if</span>(el)&#123;</div><div class="line">                el.value=el.value.replace(<span class="regexp">/ /g</span>,<span class="string">""</span>);</div><div class="line">                <span class="keyword">if</span> (isEmpty(el.value)) &#123;</div><div class="line">                    alert(<span class="string">"请输入登录密码"</span>);</div><div class="line">                    el.focus();</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">                validCode=el.value;</div><div class="line">            &#125;</div><div class="line">            loginName=<span class="built_in">encodeURI</span>(loginName);<span class="comment">//避免中文问题 进行URL编码</span></div><div class="line">            <span class="keyword">var</span> reqId=(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()+<span class="string">""</span>;<span class="comment">//获取时间戳给 reqId</span></div><div class="line">            <span class="keyword">var</span> str=strEnc(loginName+<span class="string">"\n"</span>+pwd,reqId,validCode);<span class="comment">//关键加密代码，可以跟进分析</span></div><div class="line"> </div><div class="line">            frm.elements[<span class="string">"loginName"</span>].disabled=<span class="string">"true"</span>;</div><div class="line">            frm.elements[<span class="string">"pwd"</span>].value=pwd;</div><div class="line">            frm.elements[<span class="string">"pwd"</span>].disabled=<span class="string">"true"</span>;</div><div class="line">            frm.elements[<span class="string">"req"</span>].value=str;</div><div class="line">            frm.elements[<span class="string">"reqId"</span>].value=reqId;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>找到这段代码，其中主要是对输入检查的部分，重点看这两处</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pwd = encode(loginName, pwd);</div></pre></td></tr></table></figure><p>此处对密码进行第一次加密</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">loginName=<span class="built_in">encodeURI</span>(loginName);<span class="comment">//避免中文问题</span></div><div class="line"><span class="keyword">var</span> reqId=(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()+<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> str=strEnc(loginName+<span class="string">"\n"</span>+pwd,reqId,validCode);</div></pre></td></tr></table></figure><p>第一行：将用户名进行 URL 的格式编码</p><p>第二行，取时间戳赋值给 reqId</p><p>第三行传入用户名，加密后的密码和验证码进行验证，函数返回值赋给变量 str，正是提交数据的 req 的值</p><p>在两个加密函数入口设置断点，开发者工具设置断点的，只要在这个代码的行号上点击鼠标就行了，设好断点后，再次输入用户名密码和验证码，重新提交，程序被断下：</p><p><img src="http://image.3001.net/images/20180402/15226545079968.png!small" alt="image"></p><p>F11单步进入第一个断点，这里需要点击界面下面的中括号重新格式化下代码，单步跟进后看到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> _$_7151 = [<span class="string">"encode"</span>, <span class="string">"ABCDEFGHIJKLMNOP"</span>, <span class="string">"QRSTUVWXYZabcdef"</span>, <span class="string">"ghijklmnopqrstuv"</span>, <span class="string">"wxyz0123456789+/"</span>, <span class="string">"="</span>, <span class="string">""</span>, <span class="string">"charCodeAt"</span>, <span class="string">"charAt"</span>, <span class="string">"length"</span>, <span class="string">"join"</span>, <span class="string">"reverse"</span>, <span class="string">"split"</span>];</div><div class="line"><span class="built_in">window</span>[_$_7151[<span class="number">0</span>]] = <span class="function"><span class="keyword">function</span>(<span class="params">c, e</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">p</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> q = _$_7151[<span class="number">1</span>] + _$_7151[<span class="number">2</span>] + _$_7151[<span class="number">3</span>] + _$_7151[<span class="number">4</span>] + _$_7151[<span class="number">5</span>];</div><div class="line">        p = <span class="built_in">encodeURI</span>(p);</div><div class="line">        <span class="keyword">var</span> r = _$_7151[<span class="number">6</span>];</div><div class="line">        <span class="keyword">var</span> g, h, j = _$_7151[<span class="number">6</span>];</div><div class="line">        <span class="keyword">var</span> k, l, m, o = _$_7151[<span class="number">6</span>];</div><div class="line">        <span class="keyword">var</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            g = p[_$_7151[<span class="number">7</span>]](b++);<span class="comment">//第一个字符</span></div><div class="line">            h = p[_$_7151[<span class="number">7</span>]](b++);<span class="comment">//第二个字符</span></div><div class="line">            j = p[_$_7151[<span class="number">7</span>]](b++);<span class="comment">//第三个字符</span></div><div class="line">            k = g &gt;&gt; <span class="number">2</span>; <span class="comment">//得到 k</span></div><div class="line">            l = ((g &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | (h &gt;&gt; <span class="number">4</span>);<span class="comment">//得到 i</span></div><div class="line">            m = ((h &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | (j &gt;&gt; <span class="number">6</span>);<span class="comment">//得到 m</span></div><div class="line">            o = j &amp; <span class="number">63</span>; <span class="comment">//得到 o</span></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">isNaN</span>(h)) &#123;  <span class="comment">//如果没有第二个字符</span></div><div class="line">                m = o = <span class="number">64</span> <span class="comment">//则取表中的第64个字符替换</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">isNaN</span>(j)) &#123; <span class="comment">//如果没有第三个字符</span></div><div class="line">                    o = <span class="number">64</span> <span class="comment">//则取表中的第64个字符替换</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ;r = r + q[_$_7151[<span class="number">8</span>]](k) + q[_$_7151[<span class="number">8</span>]](l) + q[_$_7151[<span class="number">8</span>]](m) + q[_$_7151[<span class="number">8</span>]](o);</div><div class="line">            g = h = j = _$_7151[<span class="number">6</span>];</div><div class="line">            k = l = m = o = _$_7151[<span class="number">6</span>]</div><div class="line">        &#125; <span class="keyword">while</span> (b &lt; p[_$_7151[<span class="number">9</span>]]);;<span class="keyword">return</span> r</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> d = c[_$_7151[<span class="number">9</span>]];</div><div class="line">    <span class="keyword">var</span> f = a(e)[_$_7151[<span class="number">12</span>]](_$_7151[<span class="number">6</span>])[_$_7151[<span class="number">11</span>]]()[_$_7151[<span class="number">10</span>]](_$_7151[<span class="number">6</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; b &lt; (d % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">2</span>); b++) &#123;</div><div class="line">        f = a(f)[_$_7151[<span class="number">12</span>]](_$_7151[<span class="number">6</span>])[_$_7151[<span class="number">11</span>]]()[_$_7151[<span class="number">10</span>]](_$_7151[<span class="number">6</span>])</div><div class="line">    &#125;</div><div class="line">    ;<span class="keyword">return</span> f</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个函数返回的 f 就是密码第一次加密后的结果了，这个代码是用什么工具变成这样的不太清楚，如果出现 _$_7151[n] 这样的字符可以查询代码最上面的列表</p><p>代换，大致过程不详说，跟一遍就知道了，就是循环从密码中取三个字符 g、h、j，然后将三个字符的ascii码左移或右移，或和其他结果加加减减，得到的结果 k、l、m、o 查询表格替换字符，如果密码长度不是 3 的整数倍，则查表结果用 “=” 替换，将循环得到的查表结果依次连接，并反序，得到一个密码加密后的密码</p><p>至少将密码进行两次这样的加密计算，如果用户名的长度是奇数，再进行一次加密，加密的过程只需要复制代码到 python 中，修改成  python 的格式就可以了。</p><p>步过了对密码的第一次加密后，继续步进上面设下的第二个断点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strEnc</span>(<span class="params">data,firstKey,secondKey,thirdKey</span>)</span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> leng = data.length;<span class="comment">//取 data 的长度</span></div><div class="line">    <span class="keyword">var</span> encData = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> firstKeyBt,secondKeyBt,thirdKeyBt,firstLength,secondLength,thirdLength;</div><div class="line">    <span class="keyword">if</span>(firstKey != <span class="literal">null</span> &amp;&amp; firstKey != <span class="string">""</span>)&#123;</div><div class="line">        firstKeyBt = getKeyBytes(firstKey);<span class="comment">//取 firstkey 在每个字符之间插入一个字节的 0</span></div><div class="line">        firstLength = firstKeyBt.length;<span class="comment">//取得插入 0 后的长度</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(secondKey != <span class="literal">null</span> &amp;&amp; secondKey != <span class="string">""</span>)&#123;</div><div class="line">        secondKeyBt = getKeyBytes(secondKey);<span class="comment">//取 secondkey 在每个字符之间插入一个字节的 0</span></div><div class="line">        secondLength = secondKeyBt.length;<span class="comment">//取得插入 0 后的长度</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(thirdKey != <span class="literal">null</span> &amp;&amp; thirdKey != <span class="string">""</span>)&#123; <span class="comment">//登陆过程中，并没用到 thirdkey，即 thirdKey = None</span></div><div class="line">        thirdKeyBt = getKeyBytes(thirdKey);<span class="comment">//取 thirdkey 在每个字符之间插入一个字节的 0</span></div><div class="line">        thirdLength = thirdKeyBt.length;<span class="comment">//取得插入 0 后的长度</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(leng &gt; <span class="number">0</span>)&#123; </div><div class="line">        <span class="keyword">if</span>(leng &lt; <span class="number">4</span>)&#123; 如果 data 的长度＜<span class="number">4</span>，因为跳过，代码用省略号替换</div><div class="line">            <span class="comment">//省去一些代码……</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> iterator = <span class="built_in">parseInt</span>(leng/<span class="number">4</span>);<span class="comment">//data 的长度除 64，得到循环次数</span></div><div class="line">            <span class="keyword">var</span> remainder = leng%<span class="number">4</span>; <span class="comment">//data 的长度是否是 64 位的整数倍，保存余数</span></div><div class="line">            <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; iterator;i++)&#123; <span class="comment">//开始循环</span></div><div class="line">                <span class="keyword">var</span> tempData = data.substring(i*<span class="number">4</span>+<span class="number">0</span>,i*<span class="number">4</span>+<span class="number">4</span>); <span class="comment">//循环取 data 的64 位</span></div><div class="line">                <span class="keyword">var</span> tempByte = strToBt(tempData);<span class="comment">//转换成 bits</span></div><div class="line">                <span class="keyword">var</span> encByte ;</div><div class="line">                <span class="keyword">if</span>(firstKey != <span class="literal">null</span> &amp;&amp; firstKey !=<span class="string">""</span> &amp;&amp; secondKey != <span class="literal">null</span> &amp;&amp; secondKey != <span class="string">""</span> )&#123;</div><div class="line">                    <span class="keyword">var</span> tempBt;</div><div class="line">                    <span class="keyword">var</span> x,y;</div><div class="line">                    tempBt = tempByte;</div><div class="line">                    <span class="keyword">for</span>(x = <span class="number">0</span>;x &lt; firstLength ;x ++)&#123;</div><div class="line">                        tempBt = enc(tempBt,firstKeyBt[x]);<span class="comment">//循环从firstkey 中取得64 位做密钥，依次对 data 中的某一段加密</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">for</span>(y = <span class="number">0</span>;y &lt; secondLength ;y ++)&#123;</div><div class="line">                        tempBt = enc(tempBt,secondKeyBt[y]);<span class="comment">//循环从second中取得64 位做密钥，依次对 data 中的某一段加密</span></div><div class="line">                    &#125;</div><div class="line">                    encByte = tempBt;<span class="comment">//保存加密结果</span></div><div class="line">                &#125;</div><div class="line">            <span class="comment">//…………</span></div><div class="line">            <span class="keyword">if</span>(remainder &gt; <span class="number">0</span>)&#123;  <span class="comment">//如果 data 有多余的长度，不足64 位</span></div><div class="line">                <span class="keyword">var</span> remainderData = data.substring(iterator*<span class="number">4</span>+<span class="number">0</span>,leng);</div><div class="line">                <span class="keyword">var</span> tempByte = strToBt(remainderData);<span class="comment">//将余下的分到4个16位的数组中</span></div><div class="line">                <span class="keyword">var</span> encByte ;</div><div class="line">                <span class="keyword">if</span>(firstKey != <span class="literal">null</span> &amp;&amp; firstKey !=<span class="string">""</span> &amp;&amp; secondKey != <span class="literal">null</span> &amp;&amp; secondKey != <span class="string">""</span> &amp;&amp; thirdKey != <span class="literal">null</span> )&#123;</div><div class="line">                    <span class="keyword">var</span> tempBt;</div><div class="line">                    <span class="keyword">var</span> x,y,z;</div><div class="line">                    tempBt = tempByte;</div><div class="line">                    <span class="keyword">for</span>(x = <span class="number">0</span>;x &lt; firstLength ;x ++)&#123;</div><div class="line">                        tempBt = enc(tempBt,firstKeyBt[x]);循环从firstkey 中取得<span class="number">64</span> 位做密钥，依次对 data 中的某一段加密</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">for</span>(y = <span class="number">0</span>;y &lt; secondLength ;y ++)&#123;</div><div class="line">                        tempBt = enc(tempBt,secondKeyBt[y]);循环从secondkey中取得<span class="number">64</span> 位做密钥，依次对 data 中的某一段加密</div><div class="line">                    &#125;</div><div class="line">                    encByte = tempBt;<span class="comment">//保存加密结果</span></div><div class="line">                &#125;</div><div class="line">                encData += bt64ToHex(encByte);<span class="comment">//将加密后的文本转为16进制文本</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> encData;<span class="comment">//返回加密结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是一段循环进行 DES 加密的代码，先将data, firstkey, secondkey进行字符间插入一个字节的0, 然后不是 64 位整数倍长度的从上面代码看，相当于在后面补上 0 了<br>从data中取出一段64位数据，循环用 firstkey 和 second 中的 64 位做密钥，层层加密，得到的结果和 data 中其他 64 位加密的结果串联后就是 req 的值了<br>因为 key 都是 64 位的，再加上本身 sources 中也看到了 DES.js 文件，所以 enc(tempBt,secondkeyBt)应该就是 DES 算法了。<br>但是自己写代码模拟登陆确发现结果和自己跟的结果不同，从代码中看，DES 采用了 ECB 模式，不是 CBC 模式，PAD_mode 也没问题，都64位，不需要 DES 自己填充啊。没办法，只得硬着头皮继续跟进 DES 加密的代码</p><p>我们知道，DES 加密需要先对 key 进行 置换，得到 56 位密钥，标准的 DES 都有个置换表，正常的 DES 置换表是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Permutation <span class="keyword">and</span> translation tables <span class="keyword">for</span> DES</div><div class="line">        __pc1 = [<span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</div><div class="line">               <span class="number">0</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>,</div><div class="line">               <span class="number">9</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>,</div><div class="line">               <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>,</div><div class="line">               <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>,</div><div class="line">               <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>,</div><div class="line">               <span class="number">13</span>, <span class="number">5</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>,</div><div class="line">               <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span></div><div class="line">               ]</div></pre></td></tr></table></figure><p>即将 key 的第 56 位放到第 0 位，第 48 位放到第 1 位…………最后置换出 56 位的 key，再分成 2 个28 密钥，循环左移和右移，然后 对 IP 置换后的 data 加密，进行 Sbox 盒替换 和 Pbox 替换，再进行一次 IP-1 置换得到密文，解密算法一样。</p><p>但跟进 DES 加密函数没多久就发现问题了，找到密钥置换的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> keys = generateKeys(keyByte);</div></pre></td></tr></table></figure><p>并跟进：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateKeys</span>(<span class="params">keyByte</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> key   = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">56</span>);</div><div class="line">    <span class="keyword">var</span> keys = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"> </div><div class="line">    keys[ <span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">3</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">4</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">5</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">6</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">7</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">8</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[ <span class="number">9</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[<span class="number">10</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[<span class="number">11</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[<span class="number">12</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[<span class="number">13</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[<span class="number">14</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    keys[<span class="number">15</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">var</span> loop = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>];<span class="comment">//看到了循环移位的表，没看到置换表</span></div><div class="line"> </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>,k=<span class="number">7</span>;j&lt;<span class="number">8</span>;j++,k--)&#123;</div><div class="line">            key[i*<span class="number">8</span>+j]=keyByte[<span class="number">8</span>*k+i];<span class="comment">//用了这个循环生成 56 位 </span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//省略代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里修改了标准的置换表，用了一个嵌套循环生成 56 位密钥，即把</p><p>原来 key 的 56 位 –&gt; 第 0 位，48 位 –&gt; 第 1 位，40 位 –&gt; 第 2 位，…………0 位–&gt; 第 7 位</p><p>原来 key 的 57 位 –&gt; 第 8 位，49 位 –&gt; 第 9 位，41 位 –&gt; 第 10 位，………… 1 位 –&gt;第 15 位</p><p>…………</p><p>最后丢弃原 key 的第 63，55，47，39，31，23，15，7 位（位置号从 0 开始）</p><p>在 python 中不能直接使用标准的 DES库了，可以把标准库中的 pyDes.py 文件拷贝到工程同目录下，改名为 Des,py，并导入工程</p><p>from Des import *</p><p>另外在 Des.py 中找到 key 的置换表，修改成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__pc1 = [</div><div class="line">        <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">0</span>,</div><div class="line">        <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</div><div class="line">        <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</div><div class="line">        <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</div><div class="line">        <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</div><div class="line">        <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</div><div class="line">        <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span></div><div class="line">    ]</div></pre></td></tr></table></figure><p>就可以正常使用 Des 了</p><p>最后附上 python 代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> Des <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">s = requests.session()</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</div><div class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">    <span class="string">'Referer'</span>: <span class="string">'http://www.jste.net.cn/uids/login.jsp'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) \</span></div><div class="line"><span class="string">    Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0'</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_encode</span><span class="params">(data)</span>:</span>  <span class="comment"># 懒得注释了，直接从js中拷贝出来，改成python的代码</span></div><div class="line">    tab = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span></div><div class="line">    data_bytes = list(data.encode())</div><div class="line">    <span class="keyword">while</span> len(data_bytes) % <span class="number">3</span> != <span class="number">0</span>:</div><div class="line">        data_bytes.append(<span class="number">0</span>)</div><div class="line">    b = <span class="number">0</span></div><div class="line">    length = len(data_bytes)</div><div class="line">    r = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> b &lt; length:</div><div class="line">        g = data_bytes[b]</div><div class="line">        h = data_bytes[b + <span class="number">1</span>]</div><div class="line">        j = data_bytes[b + <span class="number">2</span>]</div><div class="line">        k = g &gt;&gt; <span class="number">2</span></div><div class="line">        m = ((g &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | (h &gt;&gt; <span class="number">4</span>)</div><div class="line">        n = ((h &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | (j &gt;&gt; <span class="number">6</span>)</div><div class="line">        o = j &amp; <span class="number">63</span></div><div class="line">        third_char = <span class="string">'='</span> <span class="keyword">if</span> h == <span class="number">0</span> <span class="keyword">else</span> tab[n]</div><div class="line">        fourth_char = <span class="string">'='</span> <span class="keyword">if</span> j == <span class="number">0</span> <span class="keyword">else</span> tab[o]</div><div class="line">        r = r + tab[k] + tab[m] + third_char + fourth_char</div><div class="line">        b = b + <span class="number">3</span></div><div class="line">    <span class="keyword">return</span> r[::<span class="number">-1</span>]  <span class="comment"># 反序输出</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_pwd</span><span class="params">(str_name, str_pwd)</span>:</span></div><div class="line">    encoded_pwd = custom_encode(str_pwd)</div><div class="line">    encoded_pwd = custom_encode(encoded_pwd)  <span class="comment"># 先连续对密码加密两次</span></div><div class="line">    <span class="keyword">if</span> len(str_name) % <span class="number">2</span> == <span class="number">1</span>:</div><div class="line">        encoded_pwd = custom_encode(encoded_pwd)  <span class="comment"># 如果用户名长度是奇数，则再加密一次</span></div><div class="line">    <span class="keyword">return</span> encoded_pwd</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">strenc</span><span class="params">(data, firstkey, secondkey)</span>:</span></div><div class="line">    bts_data = extend_to_16bits(data)  <span class="comment"># 将data长度扩展成64位的倍数</span></div><div class="line">    bts_firstkey = extend_to_16bits(firstkey)  <span class="comment"># 将 first_key 长度扩展成64位的倍数</span></div><div class="line">    bts_secondkey = extend_to_16bits(secondkey)  <span class="comment"># 将 second_key 长度扩展成64位的倍数</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    bts_result = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(bts_data):</div><div class="line">        bts_temp = bts_data[i:i + <span class="number">8</span>]  <span class="comment"># 将data分成每64位一段，分段加密</span></div><div class="line">        j, k = <span class="number">0</span>, <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> j &lt; len(bts_firstkey):</div><div class="line">            des_k = des(bts_firstkey[j: j + <span class="number">8</span>], ECB)  <span class="comment"># 分别取出 first_key 的64位作为密钥</span></div><div class="line">            bts_temp = list(des_k.encrypt(bts_temp))</div><div class="line">            j += <span class="number">8</span></div><div class="line">        <span class="keyword">while</span> k &lt; len(bts_secondkey):</div><div class="line">            des_k = des(bts_secondkey[k:k + <span class="number">8</span>], ECB)  <span class="comment"># 分别取出 second_key 的64位作为密钥</span></div><div class="line">            bts_temp = list(des_k.encrypt(bts_temp))</div><div class="line">            k += <span class="number">8</span></div><div class="line">        bts_result.extend(bts_temp)</div><div class="line">        i += <span class="number">8</span></div><div class="line">    str_result = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> bts_result:</div><div class="line">        str_result += <span class="string">'%02X'</span> % each  <span class="comment"># 分别加密data的各段，串联成字符串</span></div><div class="line">    <span class="keyword">return</span> str_result</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend_to_16bits</span><span class="params">(data)</span>:</span>  <span class="comment"># 将字符串的每个字符前插入 0，变成16位，并在后面补0，使其长度是64位整数倍</span></div><div class="line">    bts = data.encode()</div><div class="line">    filled_bts = []</div><div class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> bts:</div><div class="line">        filled_bts.extend([<span class="number">0</span>, each])  <span class="comment"># 每个字符前插入 0</span></div><div class="line">    <span class="keyword">while</span> len(filled_bts) % <span class="number">8</span> != <span class="number">0</span>:  <span class="comment"># 长度扩展到8的倍数</span></div><div class="line">        filled_bts.append(<span class="number">0</span>)  <span class="comment"># 不是8的倍数，后面添加0，便于DES加密时分组</span></div><div class="line">    <span class="keyword">return</span> filled_bts</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rand_code</span><span class="params">()</span>:</span></div><div class="line">    random_code_url = <span class="string">r'http://www.jste.net.cn/uids/genImageCode?rnd='</span></div><div class="line">    time_stamp = str(int(time() * <span class="number">1000</span>))</div><div class="line">    random_code_url += time_stamp</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        req = s.get(random_code_url, headers=headers, stream=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'rand_code.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> req.iter_content(chunk_size=<span class="number">1024</span>):</div><div class="line">                f.write(chunk)</div><div class="line">    <span class="keyword">except</span> requests.RequestException:</div><div class="line">        print(<span class="string">'网络链接错误，请稍后重试/(ㄒoㄒ)/~~'</span>)</div><div class="line">        sys.exit()</div><div class="line">    <span class="keyword">with</span> Image.open(<span class="string">'rand_code.jpg'</span>)<span class="keyword">as</span> img:</div><div class="line">        img.show()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_site</span><span class="params">(reqid, randomcode, reqkey)</span>:</span></div><div class="line">    post_data = &#123;</div><div class="line">        <span class="string">'randomCode'</span>: randomcode,</div><div class="line">        <span class="string">'returnURL'</span>: <span class="keyword">None</span>,</div><div class="line">        <span class="string">'appId'</span>: <span class="string">'uids'</span>,</div><div class="line">        <span class="string">'site'</span>: <span class="keyword">None</span>,</div><div class="line">        <span class="string">'encrypt'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'reqId'</span>: reqid,</div><div class="line">        <span class="string">'req'</span>: reqkey</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        req = s.post(<span class="string">'http://www.jste.net.cn/uids/login.jsp'</span>, headers=headers, data=post_data)</div><div class="line">        print(<span class="string">'Status Code：%s'</span> % req.status_code)  <span class="comment"># 不知道为什么浏览器上登陆成功返回的是302，这里返回200</span></div><div class="line">        <span class="keyword">if</span> <span class="string">'Set-Cookie'</span> <span class="keyword">in</span> req.headers.keys():  <span class="comment"># 还好，看到response中出现Set-Cookie，就登陆成功了</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">except</span> requests.RequestException:</div><div class="line">        print(<span class="string">'网络链接错误，请稍后重试/(ㄒoㄒ)/~~'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">''</span>.center(<span class="number">100</span>, <span class="string">'-'</span>))</div><div class="line">    uname = input(<span class="string">'请输入你的用户名：'</span>)</div><div class="line">    pwd = input(<span class="string">'请输入你的登陆密码：'</span>)</div><div class="line">    get_rand_code()</div><div class="line">    secondkey = input(<span class="string">'请输入看到的验证码：'</span>)  <span class="comment"># 取得验证码，作为second_key，提交数据时作为 randomCode 的值</span></div><div class="line">    firstkey = str(int(time() * <span class="number">1000</span>))  <span class="comment"># 取得提交时的时间戳，作为first_key，提交数据时候作为 reqId 的值</span></div><div class="line">    crypt_pwd = encode_pwd(uname, pwd)  <span class="comment"># 对输入的密码进行第一次加密</span></div><div class="line">    data = quote(uname) + <span class="string">'\n'</span> + crypt_pwd  <span class="comment"># 用户名URI编码后和密码加密后的文本链接等待被DES加密</span></div><div class="line">    post_req = strenc(data, firstkey, secondkey)  <span class="comment"># 主要是DES计算，作为 req 的值提交数据</span></div><div class="line">    <span class="keyword">if</span> login_site(reqid=firstkey, randomcode=secondkey, reqkey=post_req) <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">''</span>.center(<span class="number">100</span>, <span class="string">'-'</span>))</div><div class="line">        print(<span class="string">'登陆成功，O(∩_∩)O哈哈~...'</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            req = s.get(<span class="string">'http://www.jste.net.cn/train/credit_hour/top.jsp'</span>)  <span class="comment"># 打开一个网页测试一下</span></div><div class="line">            soup = BeautifulSoup(req.text, <span class="string">'html5lib'</span>)  <span class="comment"># 网页为多框架，测试下访问TOP框架中的文本</span></div><div class="line">            print(soup.select(<span class="string">'.b'</span>)[<span class="number">0</span>].text.replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>))</div><div class="line">        <span class="keyword">except</span> requests.RequestException:</div><div class="line">            print(<span class="string">'网络链接错误，请稍后重试/(ㄒoㄒ)/~~'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  <span class="comment"># 启动程序</span></div><div class="line">    main()</div></pre></td></tr></table></figure></p><p>效果<br><img src="http://image.3001.net/images/20180402/15226546215346.png!small" alt="image"></p><p>最后思考了下，很多网站的数据都是明码提交的，或者是简单的加密提交的，这个网站在加密上花了一些工夫</p><p>但是js脚本最大的问题就是别人可以看到源码，虽然网站登陆成功后立即删除了js文件，但是只要出现了就会被发现，我网上搜索了下隐藏源码的办法，但是水平才菜了，没学过 java ，也没看懂。</p><p>最后补充下：DES加密的数据 data 是用户名的” URL格式 + 换行 + 密码第一次加密得到的文本“</p><p>firstkey 是提交时得到的时间戳，secondkey 就是输入的验证码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文转载自看雪论坛【作者】rdsnow&lt;/p&gt;
&lt;p&gt;不得不说，最近的 Python 蛮火的，我也稍稍了解了下，并试着用 Python 爬取网站上的数据&lt;/p&gt;
&lt;p&gt;不过有些数据是要登陆后才能获取的，我们每年都要到某教师教育网学习一些公需科目，就拿这个网站试试，关键是对网
      
    
    </summary>
    
      <category term="python 爬虫 web安全" scheme="http://damiantuan.xyz/categories/python-%E7%88%AC%E8%99%AB-web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python,爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://damiantuan.xyz/2018/02/20/hello-world/"/>
    <id>http://damiantuan.xyz/2018/02/20/hello-world/</id>
    <published>2018-02-20T13:28:46.067Z</published>
    <updated>2017-11-18T07:52:41.738Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="just-test"><a href="#just-test" class="headerlink" title="just test"></a>just test</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511496576&amp;di=e623116599413655c9f56a092b579092&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fdl.bizhi.sogou.com%2Fimages%2F2012%2F05%2F3%2F6990.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈HTTP中Get与Post</title>
    <link href="http://damiantuan.xyz/2017/12/09/%E6%B5%85%E8%B0%88HTTP%E4%B8%ADGet%E4%B8%8EPost/"/>
    <id>http://damiantuan.xyz/2017/12/09/浅谈HTTP中Get与Post/</id>
    <published>2017-12-09T06:25:55.000Z</published>
    <updated>2017-12-09T08:13:31.272Z</updated>
    
    <content type="html"><![CDATA[<p>前面的一部分是自己参考网上的一些比较浅显易懂的文章写的，也引用了一些段子；第二部分就是正儿八经的搞知识了。<br><a id="more"></a></p><h3 id="装逼部分"><a href="#装逼部分" class="headerlink" title="装逼部分"></a>装逼部分</h3><p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。<br>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。<br>其实网络传输方法有很多种，一个表格可以全部概述。</p><table><thead><tr><th>HTTPMethod</th><th style="text-align:center">RFC</th><th style="text-align:center">Request Has Body</th><th style="text-align:center">Response Has Body</th><th style="text-align:center">safe</th><th style="text-align:center">Idempotent</th><th style="text-align:center">Cacheable</th></tr></thead><tbody><tr><td>GET</td><td style="text-align:center">RFC7231</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td></tr><tr><td>HEAD</td><td style="text-align:center">RFC7231</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td></tr><tr><td>POST</td><td style="text-align:center">RFC7231</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td></tr><tr><td>PUT</td><td style="text-align:center">RFC7231</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td></tr><tr><td>DELETE</td><td style="text-align:center">RFC7231</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td></tr><tr><td>CONNECT</td><td style="text-align:center">RFC7231</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr><tr><td>OPTIONS</td><td style="text-align:center">RFC7231</td><td style="text-align:center">Optional</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td></tr><tr><td>TRACE</td><td style="text-align:center">RFC7231</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td></tr><tr><td>PATCH</td><td style="text-align:center">RFC5789</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td></tr></tbody></table><p>关于POST方法与GET方法的区别，很多教科书或是计算机类的书籍都会像下面这样写，恩，大致意思就是这样</p><blockquote><p>GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。 GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST么有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 GET参数通过URL传递，POST放在Request body中。</p></blockquote><p>然而这并不具有技术上的普适性，甚至有些说法还是错误的，比如说URL并没有长度的限制，URL长度的限制是与浏览器与系统有关的，其中所说的系统包括终端系统和服务端系统，URl在产生的时候其本身并没有任何的限制；再者来说安全性的问题，我只能说不考虑应用情景的所谓安全性都是在耍流氓。</p><p>首先我们要明白什么GET和POST。<br>答案：HTTP协议中的两种发送请求的方法。说明白点，就是通信方式。比如A要联系B，那么A可以选择打电话或是发短信，微信和QQ，还可以写信，这其中不管那种方法都可以联系都B，只不过是形式不一样。<br>HTTP是什么？<br>答案：HTTP（超文本传输协议（HTTP，HyperText Transfer Protocol)）是基于TCP/IP的关于数据如何在万维网中如何通信的协议。这个有点像使用说明。互联网上面两台计算机互不相识，谁也不知道谁，HTTP中说明了一系列的东西，协议版本号，接受的字符类型，客户信息和内容之类的。就像你接到一分书信，一开始写明了是用中文书写的，你要找会中文的人，然后发现这种中文隶书写的，你还要从会中文的人中筛选出一个能看隶书的人来，然后······经过一系列的努力，这样到最后就可以解读出这份书信了。<br>TCP/IP是什么？<br>答案：Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。再说明白点，TCP/IP就是规定了互联网中计算机如何通信的协议，就像写信的时候是邮局告诉你规定邮政编码一样。</p><p>这样看，我们知道HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p><p>在万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签(设置method为GET)，而且要求把传送的数据放在车顶上(url中)以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩;也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>GET和POST还有一个重大区别，简单的说：<br>GET产生一个TCP数据包;POST产生两个TCP数据包。<br>长的说：<br>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。<br>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。<br>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑!跳入需谨慎。为什么?</p><ol><li>GET与POST都有自己的语义，不能随便混用。</li><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。<br>很好，这就是装逼的第一步，完成了。</li></ol><h3 id="不装逼部分"><a href="#不装逼部分" class="headerlink" title="不装逼部分"></a>不装逼部分</h3><blockquote><p>第二部分引用陈曦明的文章，出于对知识的敬畏，不装逼了，认认真真搞。</p></blockquote><p>　　Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p><p>　　1.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>　　* 注意：这里安全的含义仅仅是指是非修改信息。</p><p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p><p>　　幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>　　幂等有一下几种定义：<br>　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。<br>　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。<br>看完上述解释后，应该可以理解GET幂等的含义了。</p><p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><p>　　2.根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p><p>　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p><p>　　1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p><p>　　2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p><p>　　3.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p><p> 　　* 简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</p><p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。</p><p>　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p><p>　　1.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>　　POST把提交的数据则放置在是HTTP包的包体中。</p><p>　　2.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p><p>　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p><p>　　(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p><p>　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]</p><p>　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p><p>　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p><p>　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p><p>　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。<br>　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。<br>　　　　 3).IIS 6.0默认最大请求头是16KB。<br>　　IIS 6.0之前没有这些限制。[见参考资料5]</p><p>　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p><p>　　3.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\”XXXX\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&amp;password=hyddd，用request.getQueryString()得到的是：name=hyddd&amp;password=hyddd。在PHP中，可以用\$_GET和\$_POST分别获取GET和POST中的数据，而\$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p><p>　　4.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p><p>　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p><p>参考资料：</p><p>[1].<a href="http://hi.baidu.com/liuzd003/blog/item/7bfecbfa6ea94ed8b58f318c.html" target="_blank" rel="external">http://hi.baidu.com/liuzd003/blog/item/7bfecbfa6ea94ed8b58f318c.html</a></p><p>[2].<a href="http://www.blogjava.net/onlykeke/archive/2006/08/23/65285.aspx" target="_blank" rel="external">http://www.blogjava.net/onlykeke/archive/2006/08/23/65285.aspx</a></p><p>[3].<a href="http://baike.baidu.com/view/2067025.htm" target="_blank" rel="external">http://baike.baidu.com/view/2067025.htm</a></p><p>[4].<a href="http://www.chxwei.com/article.asp?id=373" target="_blank" rel="external">http://www.chxwei.com/article.asp?id=373</a></p><p>[5].<a href="http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx" target="_blank" rel="external">http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx</a></p><blockquote><p>引用地址：<a href="https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面的一部分是自己参考网上的一些比较浅显易懂的文章写的，也引用了一些段子；第二部分就是正儿八经的搞知识了。&lt;br&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://damiantuan.xyz/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="网络" scheme="http://damiantuan.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网页状态码及其处理</title>
    <link href="http://damiantuan.xyz/2017/12/03/%E7%BD%91%E9%A1%B5%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%A4%84%E7%90%86/"/>
    <id>http://damiantuan.xyz/2017/12/03/网页状态码及其处理/</id>
    <published>2017-12-03T09:55:21.000Z</published>
    <updated>2017-12-03T10:03:35.516Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下在学习爬虫过程中遇到的几种网页的状态码以及处理方法</p><a id="more"></a><p>写几个主要的，像200这样访问成功的状态码就没有必要写下来了。</p><h3 id="状态码及其含义"><a href="#状态码及其含义" class="headerlink" title="状态码及其含义"></a>状态码及其含义</h3><p> 400 Bad Request 客户端请求有语法错误，不能被服务器所理解<br> 401 Unauthorized 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br> 403 Forbidden 服务器收到请求，但是拒绝提供服务<br> 404 Not Found 请求资源不存在，eg：输入了错误的URL<br> 500 Internal Server Error 服务器发生不可预期的错误<br> 503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><p>400 Bad Request - 检查请求的参数或者路径</p><p>401 Unauthorized - 如果需要授权的网页，尝试重新登录</p><p>403 Forbidden</p><ul><li>如果是需要登录的网站，尝试重新登录</li><li>IP被封，暂停爬取，并增加爬虫的等待时间，如果拨号网络，尝试重新联网更改IP</li></ul><p>404 - Not Found 直接丢弃<br>5XX - 服务器错误，直接丢弃，并计数，如果连续不成功，WARNING 并停<br>止爬取</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下在学习爬虫过程中遇到的几种网页的状态码以及处理方法&lt;/p&gt;
    
    </summary>
    
      <category term="python,爬虫" scheme="http://damiantuan.xyz/categories/python-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>计算上证日K与个股的相关性系数</title>
    <link href="http://damiantuan.xyz/2017/11/21/%E8%AE%A1%E7%AE%97%E4%B8%8A%E8%AF%81%E6%97%A5K%E4%B8%8E%E4%B8%AA%E8%82%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E6%80%A7%E7%B3%BB%E6%95%B0/"/>
    <id>http://damiantuan.xyz/2017/11/21/计算上证日K与个股的相关性系数/</id>
    <published>2017-11-21T07:06:05.000Z</published>
    <updated>2017-11-21T08:30:10.476Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这算是一个面试的题吧。需求是把与上证日K趋势的相关性系数大于80%的个股挑选出来。<br><a id="more"></a><br>这是一个面试题，当时面试一个做量化交易的公司的一个面试题，不过对方对我这个脚本似乎不太满意，面试的后续就没有后续了。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h2><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><blockquote><p>在上交所正常盘面交易的股票大约有3400多只，如果写爬虫去获取每一只股票的相关信息那么工程量肯定不小，当然加上现在各个金融网站的反爬手段，单单写爬虫这点可能都会卡住，就在网上看看有没有什么免费的API可以使用，无意间找到了tushare这个模块，全中文手册，使用全免费，这个当然是不错的。后面在使用的过程中发现在获取当日交易情况的时候会出现不稳定然后中断获取的情况，这个······毕竟免费的而且没有像各个官方的限制，其实还是很不错的，而且也提供了大量的方法可以使用。</p></blockquote><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><blockquote><p>在获取完数据之后应该对数据进行处理，我查看了一下tushare输出的数据类型，基本上都是DataFormat的类型，这点处理上是比较有利的，但是考虑到tushare在获取数据的时候的稳定性情况，我决定不直接使用网络数据，转而使用把数据保存到本地后再使用，在使用完成后我们可以对本地文件进行删除。在这里我不考虑对每一项数据都进行入库处理，因为tushare提供了一个将数据保存的本地的方法，使用起来也十分方便。</p></blockquote><h3 id="提取结果"><a href="#提取结果" class="headerlink" title="提取结果"></a>提取结果</h3><blockquote><p>每只股票的代码是6位数，相关性系数检验在80%以上的应该不会很多，所以我采用直接将股票代码保存在一个txt文本文件中。</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><h3 id="获取有效股票代码"><a href="#获取有效股票代码" class="headerlink" title="获取有效股票代码"></a>获取有效股票代码</h3><blockquote><p>选择使用tushre之后，知道了如何获取个股的数据和上证指数，但是模块中没有提供我想要的单单的股票代码，我也不能用循环去生成股票代码，虽然说股票的代码确实是有顺序的，但是不敢保证生成的股票代码的那只股票现在是否还在市。想想，如果可以获取当日的交易的所有股票行情的话这个问题不就解决了，因为当日还在交易的所有股票肯定还没有退市的。查一下手册，发现有一个函数是一次性获取当前交易所有股票的行情数据，ok就是他了。获取到了之后保存为本地excel表格，再从表格中读取股票代码。</p></blockquote><h3 id="计算K线趋势"><a href="#计算K线趋势" class="headerlink" title="计算K线趋势"></a>计算K线趋势</h3><blockquote><p>后面发现使用tushare获取的数据并没有计算出当日的K线的走势，不过没关系了，他给出的数据中有一天的开盘价，收盘价，最高价和最低价，这些足够计算当日的K线了。正值为红，负值为绿。在计算的过程中发现读出来的数据是一个列表，其中包括表头的值，于是取下标从1开始。列表的计算在python并不是很方便，因为python并没有像c一样提供一个数组的数据结构，幸好前几天刚刚学习了numpy模块，现学现卖了，把读取出来的列表通过numpy模块转换成数组，再使用numpy模块内置算法计算，这样大大的减少了工作量。</p></blockquote><h3 id="相关性系数"><a href="#相关性系数" class="headerlink" title="相关性系数"></a>相关性系数</h3><blockquote><p>Pearson系数也称为是简单相关性系数，但是计算中要求两个计算的量近似服从二维的正态分布，而上证K线的趋势和个股K线的趋势其实并没有什么规律，不能使用这个，于是采用Spearman系数，Spearman系数在计算的过程中并不要求计算的两组数字的分布规律。</p></blockquote><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><blockquote><p>工作流程就是获取上证指数的信息，保存为表格，读表，计算K线，获取当日交易情况，保存为表格，读表，处理，得出个股编号，再通过编号去获取该股票的历史数据，保存为表格，读表，计算K线，再把个股的K线与上证的K线从获取之日开始计算，得出Spearman系数，最后把大于Spearman系数大于80%的个股编号保存下来，不满足条件的直接忽略。最后计算完该股票后把保存该股票信息的excel表格删掉，减少占用磁盘空间。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># *-*coding='UTF-8'*-*</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> pandas</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 获取上证指数的K线</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getshangzheng_K</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">#读取上证指数的日K</span></div><div class="line">    shangzheng = ts.get_hist_data(<span class="string">'sh'</span>,ktype=<span class="string">'D'</span>,start=<span class="string">'2017-07-01'</span>)</div><div class="line">    <span class="comment"># 将上证指数的日K存入excel表格</span></div><div class="line">    shangzheng.to_excel(<span class="string">'sh.xlsx'</span>,sheet_name=<span class="string">'Sheet1'</span>)</div><div class="line">    (filepath,tempfilename)=os.path.split(<span class="string">'sh.xlsx'</span>)</div><div class="line">    <span class="keyword">return</span> tempfilename</div><div class="line"></div><div class="line"><span class="comment"># 读取excel表格</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(fileName=<span class="string">''</span>,sheet=<span class="string">'Sheet1'</span>)</span>:</span></div><div class="line">    workbook=xlrd.open_workbook(fileName)</div><div class="line">    sheet1=workbook.sheet_by_name(sheet)</div><div class="line">    <span class="keyword">return</span> sheet1</div><div class="line"></div><div class="line"><span class="comment"># 计算K线的趋势</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">K</span><span class="params">(sheet,open_col_values=False,close_col_values=False)</span>:</span></div><div class="line">    open_price=sheet.col_values(open_col_values)</div><div class="line">    close_price=sheet.col_values(close_col_values)</div><div class="line">    open_price_array=np.array(open_price[<span class="number">1</span>:],dtype=float)</div><div class="line">    close_price_array=np.array(close_price[<span class="number">1</span>:],dtype=float)</div><div class="line">    movements=close_price_array-open_price_array</div><div class="line">    the_k=pandas.Series(movements)</div><div class="line">    <span class="keyword">return</span> the_k</div><div class="line"></div><div class="line"><span class="comment"># 获取上证交易所中当日正在交易的所有股票信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_today_stock</span><span class="params">()</span>:</span></div><div class="line">    todayall=ts.get_today_all()</div><div class="line">    todayall.to_excel(<span class="string">'todays.xlsx'</span>)</div><div class="line">    (filepath,tempfilename)=os.path.split(<span class="string">'todays.xlsx'</span>)</div><div class="line">    <span class="keyword">return</span> tempfilename</div><div class="line"></div><div class="line"><span class="comment"># 获取上证中正在交易的股票的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stock_num</span><span class="params">(sheet=<span class="string">''</span>)</span>:</span></div><div class="line">    todaycols=sheet.col_values(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> todaycols</div><div class="line"></div><div class="line"><span class="comment"># 获取个股的详细信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stock_info</span><span class="params">(stock_num)</span>:</span></div><div class="line">    stock_number=str(stock_num)</div><div class="line">    stock_info=ts.get_hist_data(stock_number,start=<span class="string">'2017-07-01'</span>,ktype=<span class="string">'D'</span>)</div><div class="line">    stock_info.to_excel(stock_number+<span class="string">'.xlsx'</span>)</div><div class="line">    (filepath,tempfilename)=os.path.split(stock_number+<span class="string">'.xlsx'</span>)</div><div class="line">    <span class="keyword">return</span> tempfilename</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 计算相关性系数，因为数据分布无规则，所以计算spearman相关系数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_spearman</span><span class="params">(sh,stock)</span>:</span></div><div class="line">    corr_spearman=sh.corr(stock,method=<span class="string">'spearman'</span>)</div><div class="line">    <span class="keyword">return</span> corr_spearman</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#获取上证信息并保存为表格 </span></div><div class="line">    sh_excel=getshangzheng_K()</div><div class="line">    <span class="comment">#读取上证信息表格 </span></div><div class="line">    sh_sheet=read_excel(sh_excel,sheet=<span class="string">'Sheet1'</span>)</div><div class="line">    <span class="comment"># 计算上证日K的趋势</span></div><div class="line">    sh_K=K(sh_sheet,open_col_values=<span class="number">1</span>,close_col_values=<span class="number">3</span>)</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 计算个股的日K趋势</span></div><div class="line">    today_stock_exccel=get_today_stock()</div><div class="line">    <span class="comment">#实际使用中，read_excel函数的第一个参数可以直接写成文件名，这样不必每次执行都重复去获取数据 </span></div><div class="line">    today_sheet=read_excel(today_stock_exccel,sheet=<span class="string">'Sheet1'</span>)</div><div class="line">    stock_nums=get_stock_num(today_sheet)</div><div class="line">    <span class="keyword">for</span> stock_num <span class="keyword">in</span> stock_nums[<span class="number">1</span>:]:</div><div class="line">        </div><div class="line">        stock_excel=get_stock_info(stock_num)</div><div class="line">        stock_sheet=read_excel(fileName=stock_excel,sheet=<span class="string">'Sheet1'</span>)</div><div class="line">        stock_K=K(sheet=stock_sheet,open_col_values=<span class="number">1</span>,close_col_values=<span class="number">3</span>)</div><div class="line">        <span class="comment">#以上为计算个股的K线趋势 </span></div><div class="line"></div><div class="line">        <span class="comment">#此处计算Spearman系数 </span></div><div class="line">        spearman=find_spearman(sh_K,stock_K)</div><div class="line">        <span class="keyword">if</span> spearman&gt;<span class="number">0.800</span>:</div><div class="line">            <span class="keyword">with</span> open(<span class="string">'save.txt'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> fp:</div><div class="line">                fp.write(str(stock_num).encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                <span class="keyword">print</span> <span class="string">'done one'</span>,time.strftime(<span class="string">"%Y-%m-%d %X"</span>, time.localtime())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'let one go'</span>,time.strftime(<span class="string">"%Y-%m-%d %X"</span>, time.localtime())</div><div class="line">        <span class="comment">#这句为删除使用过的表格，如果想保留相关表格，可以将其注释掉 </span></div><div class="line">        os.remove(str(stock_num)+<span class="string">'.xlsx'</span>)</div></pre></td></tr></table></figure><blockquote><p>在实际使用的过程中我们可以将上证的表格和当日成交的表格给保留下来，并在代码中注释掉相应的执行语句，将文件名直接填成参数，这样可以避免获取数据的时候tushare的不稳定造成的影响。</p><p>最后，计算的结果为300719    300716    002781    000555    </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这算是一个面试的题吧。需求是把与上证日K趋势的相关性系数大于80%的个股挑选出来。&lt;br&gt;
    
    </summary>
    
      <category term="量化分析" scheme="http://damiantuan.xyz/categories/%E9%87%8F%E5%8C%96%E5%88%86%E6%9E%90/"/>
    
    
      <category term="-python -量化分析" scheme="http://damiantuan.xyz/tags/python-%E9%87%8F%E5%8C%96%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬取当当网所有3c产品商品名称，价格，评论数</title>
    <link href="http://damiantuan.xyz/2017/11/19/scrapy%E7%88%AC%E5%8F%96%E5%BD%93%E5%BD%93%E7%BD%91%E6%89%80%E6%9C%893c%E4%BA%A7%E5%93%81%E5%95%86%E5%93%81%E5%90%8D%E7%A7%B0%EF%BC%8C%E4%BB%B7%E6%A0%BC%EF%BC%8C%E8%AF%84%E8%AE%BA%E6%95%B0/"/>
    <id>http://damiantuan.xyz/2017/11/19/scrapy爬取当当网所有3c产品商品名称，价格，评论数/</id>
    <published>2017-11-19T08:31:19.000Z</published>
    <updated>2017-11-19T09:38:31.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。<br>Scrapy 使用 Twisted这个异步网络库来处理网络通讯，架构清晰，并且包含了各种中间件接口，可以灵活的完成各种需求。</p></blockquote><a id="more"></a><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a><strong>Scrapy</strong></h2><blockquote><p>首先祭上scrapy的工作流程图。</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511092073824&amp;di=8e562aa102ed8fa398db5907bfc4cb95&amp;imgtype=0&amp;src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fd52a2834349b033b2f5311531cce36d3d439bd64.jpg" alt="scrapy"></p><blockquote><p>我们暂时不去管scrapy的设计，先看看怎么用先。</p><p>在命令终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scrapy startproject dangdang</div><div class="line">cd dangdang</div><div class="line">scrapy genspider dangdangwang dangdang.com</div></pre></td></tr></table></figure></p><p>解释一下上面的命令的含义，startporject是新建一个工程，cd就是到新建的工程项目文件夹下，genspider是依照模板生成一个爬虫，默认状态是basic模板。</p><p>在工程文件夹下的终端输入tree就可以得到如下的文件，如果输入tree显示找不到该命令的话，先安装一个小软件，apt-get install tree ,附上tree的手册<a href="https://linux.die.net/man/1/tree" target="_blank" rel="external">tree(1) - Linux man page</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">tree </div><div class="line">.</div><div class="line">├── 201708260.txt</div><div class="line">├── dangdang</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── __init__.pyc</div><div class="line">│   ├── items.py</div><div class="line">│   ├── items.pyc</div><div class="line">│   ├── middlewares.py</div><div class="line">│   ├── pipelines2excel.py</div><div class="line">│   ├── pipelines.py</div><div class="line">│   ├── pipelines.pyc</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── settings.pyc</div><div class="line">│   └── spiders</div><div class="line">│       ├── dangdangwang.py</div><div class="line">│       ├── dangdangwang.pyc</div><div class="line">│       ├── __init__.py</div><div class="line">│       └── __init__.pyc</div><div class="line">└── scrapy.cfg</div></pre></td></tr></table></figure></p><p>文件布局如上面树所示</p></blockquote><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="修改item-py文件"><a href="#修改item-py文件" class="headerlink" title="修改item.py文件"></a>修改item.py文件</h3><blockquote><p>item.py是定义scrapy抓取信息的地方，相当与你在这里要为你想得到的每一种信息都要取一个名字，名字当然是见字知意最好了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Define here the models for your scraped items</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># See documentation in:</span></div><div class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="comment"># define the fields for your item here like:</span></div><div class="line">    <span class="comment"># name = scrapy.Field()</span></div><div class="line">    <span class="comment"># 商品名称</span></div><div class="line">    title=scrapy.Field()</div><div class="line">    <span class="comment"># 评论数</span></div><div class="line">    num=scrapy.Field()</div><div class="line">    <span class="comment"># 价格</span></div><div class="line">    price=scrapy.Field()</div><div class="line">    <span class="comment"># 页面链接</span></div><div class="line">    link=scrapy.Field()</div></pre></td></tr></table></figure><h3 id="修改dangdangwang-py文件"><a href="#修改dangdangwang-py文件" class="headerlink" title="修改dangdangwang.py文件"></a>修改dangdangwang.py文件</h3><blockquote><p>dangdangwang.py文件位于spiders文件夹下，是爬虫的主要行为，他定义了如何去定位信息，把什么信息赋值给哪个item。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> dangdang.items <span class="keyword">import</span> DangdangItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangwangSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"dangdangwang"</span></div><div class="line">    allowed_domains = [<span class="string">"dangdang.com"</span>]</div><div class="line">    start_urls = [<span class="string">'http://category.dangdang.com/pg1-cid4002590.html'</span>]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># 每一个商品的点击链接（详情链接）</span></div><div class="line">        url_list=response.xpath(<span class="string">'.//*[@id="component_0__0__8609"]/li/p[@class="name"]/a/@href'</span>).extract()</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">            <span class="keyword">yield</span> scrapy.http.Request(url,callback=self.parse_name)</div><div class="line">        <span class="comment"># 搜索分类的分页</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">98</span>):</div><div class="line">            page_url=<span class="string">'http://category.dangdang.com/pg&#123;&#125;-cid4002590.html'</span>.format(i)</div><div class="line">            <span class="keyword">yield</span> scrapy.http.Request(page_url,callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_name</span><span class="params">(self,response)</span>:</span></div><div class="line">        items=DangdangItem()</div><div class="line">        items[<span class="string">'title'</span>]=response.xpath(<span class="string">'//div[@class="name_info"]/h1/text()'</span>).extract()</div><div class="line">        items[<span class="string">'num'</span>]=response.xpath(<span class="string">'//div[@class="pinglun"]/a/text()'</span>).extract()</div><div class="line">        items[<span class="string">'price'</span>]=response.xpath(<span class="string">'//div[@class="price_d"]/p[@id="dd-price"]/text()'</span>).extract()</div><div class="line">        items[<span class="string">'link'</span>]=response.url</div><div class="line">        <span class="keyword">yield</span> items</div></pre></td></tr></table></figure><h3 id="修改pipelines-py"><a href="#修改pipelines-py" class="headerlink" title="修改pipelines.py"></a>修改pipelines.py</h3><blockquote><p>pipelines.py文件是定义了爬取的数据如何保存的文件，就像他的名字一样，数据的管道。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># Define your item pipelines here</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></div><div class="line"><span class="comment"># See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># print u"商品名字："+item['title'][0]</span></div><div class="line">        <span class="comment"># print u"商品价格："+item['price'][0]</span></div><div class="line">        <span class="comment"># print u"商品评论数"+item['num'][0]</span></div><div class="line">        <span class="comment"># return item</span></div><div class="line">        today = time.strftime(<span class="string">'%Y%m%d'</span>, time.localtime())</div><div class="line">        fileName = today + <span class="string">'.txt'</span></div><div class="line">        <span class="keyword">with</span> open(fileName,<span class="string">'a'</span>) <span class="keyword">as</span> fp:</div><div class="line">                fp.write(item[<span class="string">'title'</span>][<span class="number">0</span>].replace(<span class="string">' '</span>,<span class="string">''</span>).encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                fp.write(<span class="string">"价格"</span>+item[<span class="string">'price'</span>][<span class="number">0</span>].encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                fp.write(<span class="string">"评论数"</span>+item[<span class="string">'num'</span>][<span class="number">0</span>].encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                fp.write(<span class="string">'\n'</span>)</div><div class="line">                <span class="comment"># time.sleep(1)</span></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure><blockquote><p>这里定义的是将数据保存到一个txt记事本。效果如图所示</p></blockquote><p><a href="https://imgchr.com/i/gjLDA" target="_blank" rel="external"><img src="https://s1.ax1x.com/2017/11/19/gjLDA.md.png" alt="gjLDA.md.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。&lt;br&gt;Scrapy 使用 Twisted这个异步网络库来处理网络通讯，架构清晰，并且包含了各种中间件接口，可以灵活的完成各种需求。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="-python -爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>py+bs+requests多线程爬虫</title>
    <link href="http://damiantuan.xyz/2017/11/19/py-bs-requests%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/"/>
    <id>http://damiantuan.xyz/2017/11/19/py-bs-requests多线程爬虫/</id>
    <published>2017-11-19T08:09:30.000Z</published>
    <updated>2017-11-19T08:15:21.921Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是那个站，不过我们这次不再一个一个来爬取了，我们将采用多线程进行爬取。<br><a id="more"></a></p><p>python的多线程问题一直是一个备受争议的话题，因为在多核心CPU的硬件条件下，python依然还是只能利用单核心，所以python的多线程就有一个“伪多线程”的命题，但是python多线程虽然是只能利用单核心，但是依旧比单线程要快。</p><p>思路还是一样，不过在最后处理的时候我们引入了一个多线程。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'"Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0"'</span>&#125;</div><div class="line"><span class="comment"># 读取网页源码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">    htmls=requests.get(url,headers=header)</div><div class="line">    <span class="comment"># 发现网页是用GBK编码的，在此处进行转码</span></div><div class="line">    htmls.encoding = <span class="string">'gb2312'</span> </div><div class="line">    <span class="comment"># 调用text将对象进行字符化</span></div><div class="line">    pageContent=htmls.text</div><div class="line">    <span class="keyword">return</span> pageContent</div><div class="line"></div><div class="line"><span class="comment"># 进行文章url的获取</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContentUrl</span><span class="params">(html)</span>:</span></div><div class="line">    urls=[]</div><div class="line">    bsContent=BeautifulSoup(html,<span class="string">'html.parser'</span>)</div><div class="line">    urlContent=bsContent.find(class_=<span class="string">"liszw"</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> urlContent.find_all(<span class="string">'a'</span>):</div><div class="line">        url_lib=link.get(<span class="string">'href'</span>)</div><div class="line">        urls.append(url_lib)</div><div class="line">    <span class="keyword">return</span> urls</div><div class="line"></div><div class="line"><span class="comment">#文章内容的获取</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readContent</span><span class="params">(urls)</span>:</span></div><div class="line">    articleHtml=getHtml(urls)</div><div class="line">    <span class="comment"># print articleHtml</span></div><div class="line">    bsContent=BeautifulSoup(articleHtml,<span class="string">'html.parser'</span>)</div><div class="line">    title=bsContent.find(<span class="string">'h2'</span>).string</div><div class="line">    content=bsContent.find(class_=<span class="string">"arwzks"</span>)</div><div class="line">    article=content.get_text()</div><div class="line">    txt=article.encode(<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">print</span> title+<span class="string">' start'</span></div><div class="line">    open(<span class="string">r'/home/wukong/testTuiLiXue/download/'</span>+title.encode(<span class="string">"utf-8"</span>)+<span class="string">'.txt'</span>,<span class="string">'w+'</span>).write(txt)</div><div class="line">    <span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %X'</span>,time.localtime(time.time()))+title+<span class="string">' end'</span></div><div class="line">    <span class="comment"># print txt</span></div><div class="line">    <span class="keyword">return</span> txt</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#后面的参数为CPU的核心数，虽然说只能利用单核心 </span></div><div class="line">    pool = ThreadPool(<span class="number">4</span>)</div><div class="line">    links=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</div><div class="line">        links.append(<span class="string">'http://tuilixue.com/zhentantuilizhishi/list_4_'</span>+str(i)+<span class="string">'.html'</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">        html=getHtml(link)</div><div class="line">        urls=getContentUrl(html)</div><div class="line">        url=[]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>):</div><div class="line">            url.append(urls[i])</div><div class="line">        <span class="comment"># for i in url:</span></div><div class="line">        <span class="comment">#     result = readContent(i)</span></div><div class="line">        result=pool.map(readContent,url)</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;还是那个站，不过我们这次不再一个一个来爬取了，我们将采用多线程进行爬取。&lt;br&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="-python -爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup爬虫代码</title>
    <link href="http://damiantuan.xyz/2017/11/19/BeautifulSoup%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81/"/>
    <id>http://damiantuan.xyz/2017/11/19/BeautifulSoup爬虫代码/</id>
    <published>2017-11-19T07:40:14.000Z</published>
    <updated>2017-11-19T08:01:54.245Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是上次的那个网站，不过这次我们用request+beautifulsoup来进行爬取了。<br><a id="more"></a></p><p>思路和上次的那个基本上是一样的，不过就是把定位信息的方法从原来的使用python内置的str模块中的函数方法改成了使用beautifulsoup这个第三方的模块，这个模块的手册在网上能找到，翻译得不错，基本上是一看就懂的那种。注释的话我这次没写了，因为和上次一样的，想看注释的可以去看上一篇文章。</p><p>这次的存储方法与上次使用urllib的有所不同，上次的存储是直接保存HTML文件的要使用一些处理结构性文档的工具才能查看文章的内容，而且文件命名也是使用的网站上的URL来进行的，这样的命名毫无意义也就无法知道文件中的内容是什么，所以这次我们把爬取的文章标题作为文件名，保存为txt记事本文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">url=[<span class="string">''</span>]*<span class="number">20</span></div><div class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'"Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0"'</span>&#125;</div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</div><div class="line">    htmls=requests.get(<span class="string">'http://tuilixue.com/zhentantuilizhishi/list_4_'</span>+str(page)+<span class="string">'.html'</span>,headers=header)</div><div class="line">    htmls.encoding = <span class="string">'gb2312'</span> </div><div class="line">    pageContent=htmls.text</div><div class="line">    txt=pageContent</div><div class="line"><span class="comment"># print type(txt)</span></div><div class="line"><span class="comment"># open(r'/home/wukong/testTuiLiXue/download/123.txt','w+').write(txt.encode('utf-8'))</span></div><div class="line"><span class="comment"># print content</span></div><div class="line">    bsContent=BeautifulSoup(pageContent,<span class="string">'html.parser'</span>)</div><div class="line">    urlContent=bsContent.find(class_=<span class="string">"liszw"</span>)</div><div class="line">    lis=urlContent.find_all(<span class="string">'a'</span>)</div><div class="line">    lis=str(lis)</div><div class="line">    hrefHeader=lis.find(<span class="string">r'href='</span>)</div><div class="line">    hrefTrail=lis.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">    url[<span class="number">0</span>]=lis[hrefHeader+<span class="number">6</span>:hrefTrail<span class="number">-2</span>]</div><div class="line">    <span class="keyword">if</span> hrefHeader!=<span class="number">-1</span> <span class="keyword">and</span> hrefTrail!=<span class="number">-1</span>:</div><div class="line">        <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</div><div class="line">            hrefHeader=lis.find(<span class="string">r'href='</span>,hrefTrail)</div><div class="line">            hrefTrail=lis.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">            url[times]=lis[hrefHeader+<span class="number">6</span>:hrefTrail<span class="number">-2</span>]</div><div class="line">            <span class="comment"># print url[i]</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>):</div><div class="line">            articleHtml=requests.get(url[i],headers=header)</div><div class="line">            articleHtml.encoding=<span class="string">'gb2312'</span></div><div class="line">            articleContent=articleHtml.text</div><div class="line">            bsContent=BeautifulSoup(articleContent,<span class="string">'html.parser'</span>)</div><div class="line">            title=bsContent.find(<span class="string">'h2'</span>).string</div><div class="line">            content=bsContent.find(class_=<span class="string">"arwzks"</span>)</div><div class="line">            article=content.get_text()</div><div class="line">            txt=article.encode(<span class="string">'utf-8'</span>)</div><div class="line">            <span class="keyword">print</span> title+<span class="string">' start'</span></div><div class="line">            <span class="comment"># print txt</span></div><div class="line">            open(<span class="string">r'/home/wukong/testTuiLiXue/download/'</span>+title.encode(<span class="string">"utf-8"</span>)+<span class="string">'.txt'</span>,<span class="string">'w+'</span>).write(txt)</div><div class="line">            <span class="keyword">print</span> title+<span class="string">' end'</span></div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'finish'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;还是上次的那个网站，不过这次我们用request+beautifulsoup来进行爬取了。&lt;br&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="-python -爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>三个步骤搞定一个爬虫--源码</title>
    <link href="http://damiantuan.xyz/2017/11/19/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB-%E6%BA%90%E7%A0%81/"/>
    <id>http://damiantuan.xyz/2017/11/19/三个步骤搞定一个爬虫-源码/</id>
    <published>2017-11-19T07:18:57.000Z</published>
    <updated>2017-11-19T07:29:34.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里给出“三个步骤搞定一个爬虫的python源码”</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">url=[<span class="string">''</span>]*<span class="number">10</span></div><div class="line">title=[<span class="string">''</span>]*<span class="number">10</span></div><div class="line"><span class="comment"># 循环页数</span></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</div><div class="line">    pageContent=urllib.urlopen(<span class="string">'http://tuilixue.com/zhentantuilizhishi/list_4_'</span>+str(page)+<span class="string">'.html'</span>).read()</div><div class="line">    <span class="comment"># print pageContent</span></div><div class="line">    <span class="comment">#这一部分先找到某一页中的第一篇文章作为初始化</span></div><div class="line">    <span class="comment">#根据网页代码特性，发现只有需要的页面文章链接前面有/span&gt;&lt;a href=，于是找到页面中的/span&gt;&lt;a href=的下标开始</span></div><div class="line">    hrefHeader=pageContent.find(<span class="string">r'/span&gt;&lt;a href='</span>)</div><div class="line">    <span class="comment"># print hrefHeader</span></div><div class="line"></div><div class="line">    <span class="comment">#发现所需文章链接后面没有唯一的特性，于是从前面找到的下标开始找第一个target="_blank"&gt;的下标</span></div><div class="line">    hrefTrail=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">    <span class="comment"># print hrefTrail</span></div><div class="line"></div><div class="line">    <span class="comment">#根据找到的下标，增加一定的位数找到文章链接，就是一个切片操作</span></div><div class="line">    url[<span class="number">0</span>]=pageContent[hrefHeader+<span class="number">15</span>:hrefTrail<span class="number">-2</span>]</div><div class="line"></div><div class="line">    <span class="comment">#寻找文章标题</span></div><div class="line">    titleHead=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">    titleTrail=pageContent.find(<span class="string">r'&lt;/a&gt;'</span>,titleHead)</div><div class="line">    title[<span class="number">0</span>]=pageContent[titleHead+<span class="number">16</span>:titleTrail<span class="number">-1</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hrefHeader!=<span class="number">-1</span> <span class="keyword">and</span> hrefTrail!=<span class="number">-1</span>:</div><div class="line">        <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">            <span class="comment"># 从前面的找到的尾部下标开始寻找</span></div><div class="line">            hrefHeader=pageContent.find(<span class="string">r'/span&gt;&lt;a href='</span>,hrefTrail)</div><div class="line"></div><div class="line">            <span class="comment">#从上一步开始寻找</span></div><div class="line">            hrefTrail=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line"></div><div class="line">            <span class="comment">#根据找到的下标，增加一定的位数找到文章链接，就是一个切片操作</span></div><div class="line">            url[times]=pageContent[hrefHeader+<span class="number">15</span>:hrefTrail<span class="number">-2</span>]</div><div class="line"></div><div class="line">            <span class="comment">#寻找文章标题</span></div><div class="line">            titleHead=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">            titleTrail=pageContent.find(<span class="string">r'&lt;/a&gt;'</span>,titleHead)</div><div class="line">            title[times]=pageContent[titleHead+<span class="number">16</span>:titleTrail<span class="number">-1</span>]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</div><div class="line">        <span class="comment">#分别读出每一个文章的url</span></div><div class="line">        articleContent=urllib.urlopen(url[times]).read()</div><div class="line">        <span class="keyword">print</span> <span class="string">"Start download~~"</span>+str(url[times][<span class="number">-9</span>:])</div><div class="line">        <span class="comment">#以html的格式保存</span></div><div class="line">        open(<span class="string">r'/home/wukong/testTuiLiXue/download/'</span>+url[times][<span class="number">-9</span>:].replace(<span class="string">'/'</span>,<span class="string">''</span>),<span class="string">'w+'</span>).write(articleContent)</div><div class="line">        <span class="keyword">print</span> <span class="string">"Download finish"</span>+str(page<span class="number">-1</span>)+str(times)</div><div class="line">        <span class="comment">#缓存时间为1s</span></div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"All finish"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这里给出“三个步骤搞定一个爬虫的python源码”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>三个步骤搞定一个爬虫（3）</title>
    <link href="http://damiantuan.xyz/2017/11/19/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%EF%BC%883%EF%BC%89/"/>
    <id>http://damiantuan.xyz/2017/11/19/三个步骤搞定一个爬虫（3）/</id>
    <published>2017-11-19T05:32:50.000Z</published>
    <updated>2017-11-19T05:52:22.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上两篇文章讲了怎么把整页的文章下载下来，这一次讲一下怎么把整个专栏的文章都下载下来。讲到这里，一个基础的爬虫基本上都完成了，所以技术方面这些东西并不是有什么神秘的，只是很多东西没有学到，没有思路就会觉得不可思议而已。<br><a id="more"></a></p><p>在我们开始之前我们先把上次遗留下来的问题解决一下。大家想一下，我们在之前是直接就去循环文章的链接了，尽管我们是根据html文档来进行分析判断的，但是似乎还是不够严谨，因为万一我们的判断失误了呢，那么程序就会没有响应并且一直卡在那里，因此我们应该加一个判断。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbkHf.png" alt="gbkHf.png"></p><blockquote><p>因为我们知道find函数在没有找到目标字符的时候返回-1,所以我们应该判断在不返回-1的情况下才对链接进行循环遍历。</p></blockquote><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><blockquote><p>好了，这次我们是要下载整个推理讨论板块的所有文章，我们还是对网站进行分析先。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbEE8.png" alt="gbEE8.png"></p><blockquote><p>这是第一页的网址，我们再来看看第二页</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbVUS.png" alt="gbVUS.png"></p><blockquote><p>再来看看第三页</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbZ4g.png" alt="gbZ4g.png"></p><blockquote><p>很好，直觉告诉我们，最后的那个数字应该就是页数的意思了，我们试试改成1看看能不能回到第一页。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbmCQ.png" alt="gbmCQ.png"></p><blockquote><p>成功的回到了第一页，那么我们来看看需要循环几次</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbugs.png" alt="gbugs.png"></p><blockquote><p>一共有38页，372篇文章，我们先来写一个循环看看能不能正确循环出页数</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbKvn.png" alt="gbKvn.png"></p><blockquote><p>因为字符串是不能和整型相加的，并且urllib.openg也只能接受字符参数，所以我们这里用str（）把页数的数字转换为字符型，并且连接在网址上。测试一下</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gblD0.png" alt="gblD0.png"></p><blockquote><p>篇幅原因我就不全部截图了，但是我们可以看到，这个循环应该是可以把所有的页数都正确的表示出来的，那么我们现在就要把这个循环语句加到程序中去了。大家想想，我们应该是先到一个具体的页数，然后再爬取该页的链接和文章吧，所以我这个地方的循环应该是加在最外面的一个循环。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gb1bV.png" alt="gb1bV.png"></p><blockquote><p>这样我们的爬虫基本就完工了，下面我们来做一些其他的事情。<br>首先是对于网站的压力应对，我们现在写的是一个小爬虫，对网站不能造成什么压力，而且是单线爬虫，如果以后写多线程和爬取的内容多的时候，难免造成对网站的请求过于平凡，很多时候爬虫就会被服务器封杀掉，这时我们就要限制爬虫的速度了。<br>我们先来导入一个模块</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbGUU.png" alt="gbGUU.png"></p><blockquote><p>然后在每次下载完成的时候让程序暂停一下，我这里设置的是1秒钟</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbJ5F.png" alt="gbJ5F.png"></p><blockquote><p>然后我们再来看看我们的爬虫，大家不知道有没有发现，我们下载的文章的保存名字似乎是一个递增的数字，那么我猜想可能是这个网站累计文章的篇数，为了证实这个猜想，我们到最后几页去看看。我们先来看看37页的html代码.</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbU29.png" alt="gbU29.png"></p><blockquote><p>这是我们发现我们用来命名文件的数字由4位数变成了3位数，又变成了2位数，我们这个时候在来看看我们的下载保存路径。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbavR.png" alt="gbavR.png"></p><blockquote><p>这时我们要注意到，如果文章命名的数字变成2位数的时候，命名的切片操作会把文章链接中的/符号也加进去，这时就会构成一个新的下载路径了，由于我们并没有这样的路径，所有程序就会报错。具体错误是没有一个这样的文件指向。这个是怎么样的情形大家可以自己去实验一下。下面我们就要解决这个问题，想办法把/替换掉或者去掉。我们当然可以用find找出最后的/的下标，再从下标加1的地方去执行命名，但是这样无疑会多写出几行代码来，而且每次都要去判断，之后命名的代码也要重写，这样似乎工作量就上去了。我们可以换一个想法来解决这个问题，比如说在原有的命名代码中，只要发现有/字符存在的，一律替换为空或者其他。下面我们来看一个函数。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbwK1.png" alt="gbwK1.png"></p><blockquote><p>字符串的replace函数可以将字符串中的目标字符替换成其他的字符，这时我们来这样写。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbBb6.png" alt="gbBb6.png"></p><blockquote><p>就这样，我们就可以轻松的把我们切片中的/给去掉了我们运行一下看看是否可以下载。先看看目录下面有什么。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gby5D.png" alt="gby5D.png"></p><blockquote><p>这些都是上一次我们下载的东西，我们删除掉。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbcPe.png" alt="gbcPe.png"></p><blockquote><p>现在目录已经是空的了，我们现在开始下载试试。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbsUO.png" alt="gbsUO.png"></p><blockquote><p>一堆end之后我们的文件下载好了，我们去看看.</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbg8H.png" alt="gbg8H.png"></p><blockquote><p>一大堆的文件，我们看看数量</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gbrVK.png" alt="gbrVK.png"></p><blockquote><p>372个，刚好对应了372篇文章。就这样，我们就完成了一个定制的爬虫。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上两篇文章讲了怎么把整页的文章下载下来，这一次讲一下怎么把整个专栏的文章都下载下来。讲到这里，一个基础的爬虫基本上都完成了，所以技术方面这些东西并不是有什么神秘的，只是很多东西没有学到，没有思路就会觉得不可思议而已。&lt;br&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python,爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>三个步骤搞定一个爬虫（2）</title>
    <link href="http://damiantuan.xyz/2017/11/19/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%EF%BC%882%EF%BC%89/"/>
    <id>http://damiantuan.xyz/2017/11/19/三个步骤搞定一个爬虫（2）/</id>
    <published>2017-11-19T02:35:23.000Z</published>
    <updated>2017-11-19T05:30:09.210Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一篇文章写了怎么去获取一篇文章，这一篇文章就写写怎么把一页中的10篇文章全部获取到。<br><a id="more"></a></p></blockquote><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="获取其他链接"><a href="#获取其他链接" class="headerlink" title="获取其他链接"></a>获取其他链接</h3><blockquote><p>上一次我说了怎么去获取第一条的文章链接，现在我们再来爬取本页后面剩下的链接。我们先来看看上次我们爬取链接用的代码。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/g7cdO.png" alt="g7cdO.png"></p><blockquote><p>获取后面的链接我们能不能如法炮制呢，我们先来试试。我们把代码写成下面那样</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/g74SA.png" alt="g74SA.png"></p><blockquote><p>然后我们现在来试试</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/g77ef.png" alt="g77ef.png"></p><blockquote><p>结果我们发现我们试图获取的三条链接都是一样的，可以看出，这还是本页的第一篇文章的链接。证明我们这种方法是不可行的。我们回想一下上一节课我们讲的定位链接使用函数。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/g7vSs.png" alt="g7vSs.png"></p><blockquote><p>就是这个find函数，我们看看帮助，我们发现了我们可以自定义开始寻找的下标和寻找结束的下标。我们从html里面发现我们想要爬取的链接相隔都不是很远，都处在同一个div下面。于是我们来试试，从第一条链接后面开始寻找第二条链接。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/g7xln.png" alt="g7xln.png"></p><blockquote><p>这里我们要注意后面两条代码，我们选择了开始的下标是从上一条链接的尾部开始的。现在我们来试试是否可以获取正确的链接。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/g7zyq.png" alt="g7zyq.png"></p><blockquote><p>现在我们获取到了三条不同的链接，我们再通过对比html来看看我是否获取的是正确的链接。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHSO0.png" alt="gHSO0.png"></p><blockquote><p>从结果来看，我们的代码成功的获取了本页的前几篇文章的链接。关于怎么获取剩下的链接我们应该有头绪了。当然，这里一页只有10篇文章，也就是只有10个链接，我们可以把我们的获取链接的代码复制10次，可是如果一页有20篇，30篇，50甚至是100篇呢，难道我们也要将代码复制那么多的次数，肯定不能，也不科学。很多人现在已经知道要用循环来做了，但是这个要怎么循环，从哪里循环呢？我们再来看看我们上面的代码，我们发现除了第一条链接获取的代码不一样，后面两条链接获取的代码都是一样的，这时我们就知道我们应该从第二条链接获取代码进行循环了。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gH9mV.png" alt="gH9mV.png"></p><blockquote><p>这里我们要先定义一个列表对获取的链接进行存储，因为是10篇文章，所以这里定义的就是一个10个元素的空的字符串列表。下面是我们循环的代码块。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHPTU.png" alt="gHPTU.png"></p><blockquote><p>这里结束一下我们为什么不是从0开始进行赋值，大家注意到没有，我们是从第二条文章链接看是循环的，那么第一条的文章链接在哪呢？当然是存储在了列表的第一个位置，也就是下标为0的那个位置了，关于range后面的范围，大家知道是包下不包上的就行了，就是说在range（x，y）的循环中，循环是从x开始，到y-1结束的，不包括y本身。我们现在来运行一下我们的代码看看是否获取的是正确的链接。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHAfJ.png" alt="gHAfJ.png"></p><blockquote><p>然后再次对比html</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHZlR.png" alt="gHZlR.png"></p><blockquote><p>这时我们发现我们获取了链接是正确的，那么我们就要开始进行下载了。还是上一节课的代码，不过我们进行修改一些地方。因为上次只是单个链接，这次我们有一个链接列表，所以我们应该采取循环进行下载。我们要对下载重新写一个循环了。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHmOx.png" alt="gHmOx.png">)</p><blockquote><p>我们现在来试试，这是上一节课我们成功下载的第一篇文章。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gH3fH.png" alt="gH3fH.png"></p><blockquote><p>我们现在删掉他。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHtXt.png" alt="gHtXt.png"></p><blockquote><p>现在我们看到文件夹里面是什么都没有的，我们现在开始下载。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHUnP.png" alt="gHUnP.png"></p><blockquote><p>我们这就下载完了，我打开其中一个看看。<font color="#800080">还是注意地址栏上面的链接。</font></p></blockquote><p><img src="https://s1.ax1x.com/2017/11/19/gHspj.png" alt="gHspj.png"><br><img src="https://s1.ax1x.com/2017/11/19/gHDhQ.png" alt="gHDhQ.png"></p><blockquote><p>可以看出我们获取的文章是正确的。因为篇幅有限，我就不一个一个去打开截图了，大家自己可以根据自己实际环境敲一下代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一篇文章写了怎么去获取一篇文章，这一篇文章就写写怎么把一页中的10篇文章全部获取到。&lt;br&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python,爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>三个步骤搞定一个爬虫（1）</title>
    <link href="http://damiantuan.xyz/2017/11/18/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%EF%BC%881%EF%BC%89/"/>
    <id>http://damiantuan.xyz/2017/11/18/三个步骤搞定一个爬虫（1）/</id>
    <published>2017-11-18T14:57:45.000Z</published>
    <updated>2017-11-19T03:47:50.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章算是我刚刚开始学爬虫的时候写的一个笔记了，现在整理出来，也算是一个分享过程吧。爬虫总体归纳来说就是三个步骤，获取网页源码，定位信息，提取保存信息，我们一个一个来说。</p></blockquote><a id="more"></a><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a><strong>什么是爬虫</strong></h2><blockquote><p>我们都用过搜索引擎，嗯，就是Google，百度，必应之类的东西，我们为什么可以在上面搜索出东西来就是因为他们有爬虫程序在后台帮他们收集数据。就像我们要从网上获取数据我们就要去浏览网页，爬虫就是充当了一个浏览网页的机器人，将获取到的信息返回给自己的服务器。</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h2><blockquote><p>从网页上获取一篇文章</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>其实我们不必对爬虫感到很神秘，毕竟我们每天都在用的东西。爬虫其实本质上就是在模拟用户的浏览行为，只要我们抓住这一点的话我们就可以围绕这点来展开了。用户浏览网页首先是要打开网页，再从网页上面获取到自己需要的信息，我们可以用爬虫来完成这一行为。</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>尝试获取到网页的源码，再从中提取数据。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h2><blockquote><p>因为本人一直对推理悬疑比较感兴趣，所以这次爬取的网站也是平时看一些悬疑故事的网站，同时也是因为这个网站在编码上面和一些大网站的博客不同，并不那么规范，所以对于初学者还是有一定的挑战性的。演示系统用的是kali，因为懒得去配置各种py模块了，就利用系统已经配置好的，浏览器是firefox，使用的IDE是微软的vscode。python版本为2.7</p></blockquote><h3 id="查看robots-txt"><a href="#查看robots-txt" class="headerlink" title="查看robots.txt"></a>查看robots.txt</h3><blockquote><p>首先我们选取了我们要爬取的网站<a href="http://tuilixue.com/，先检查一下robots.txt看看是否存在有一些反爬虫的信息。" target="_blank" rel="external">http://tuilixue.com/，先检查一下robots.txt看看是否存在有一些反爬虫的信息。</a></p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/gczsH.png" alt="gczsH.png"></p><blockquote><p>很好，这里没有什么限制</p></blockquote><h3 id="查看目标"><a href="#查看目标" class="headerlink" title="查看目标"></a>查看目标</h3><blockquote><p>然后我们到我平时比较常去的板块看看，<a href="http://tuilixue.com/zhentantuilizhishi/list_4_1.html" target="_blank" rel="external">http://tuilixue.com/zhentantuilizhishi/list_4_1.html</a><br>我们现在想要爬取的文章就是这样的</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/gg9eA.png" alt="gg9eA.png"></p><blockquote><p>右击鼠标查看源代码，我们可以看到，我们想要爬取的链接就是这样的</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggCdI.png" alt="ggCdI.png"></p><blockquote><p>来一张清晰的</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggSLd.png" alt="ggSLd.png"></p><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="获取网页源码"><a href="#获取网页源码" class="headerlink" title="获取网页源码"></a>获取网页源码</h3><blockquote><p>但是我们要怎么办才能使python得到这个网页的源代码呢？我们可以使用python的urllib模块提供的open方法，首先我们先新建一个py文件，惯例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment">#!usr/bin/python</span></div></pre></td></tr></table></figure></p><p>因为是linux系统，所以python路径不同于windows，第一行代码说明是用的uft-8进行编码</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggPot.png" alt="ggPot.png"></p><blockquote><p>在这里我们要先导入urllib这个模块，使用import导入。这里其实是两个方法，一个open一个read，open用于从网站上获取网页代码，read是为了读出来好打印。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggkJf.png" alt="ggkJf.png"></p><blockquote><p>我们可以得到上面结果，但是我们发现字符似乎成了乱码，为了找到原因，我们再来看看源码。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggFFP.png" alt="ggFFP.png"></p><blockquote><p>我们似乎找到了原因，网页使用的是gb2312进行编码的，但是我们是使用utf-8的，所以导致的乱码，对这方面不解的同学可以去找一些编码的知识看看。下面我们用一个编码转换来尝试获取正确的编码。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggAW8.png" alt="ggAW8.png"></p><blockquote><p>这时可以看到，我们通过强制的编码将获取的网页重新通过gb2312进行编码，我们就可以看到正确的字符了，但是在我们的这次课中并不需要这样的转码，这里只是为了显示获取的是正确的网页，从图中看到，我们获取的正是我们需要进行爬取的页面。</p></blockquote><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><blockquote><p>下一步，我们需要获取我们本页的所有的文章链接了，这里需要有一点html和css的知识，关于这部分的知识，大家自己去掌握就行了，不需要太深入。如图中显示的，href后面的就是我们在本次课中需要爬取的链接，每页都有10篇文章是我们需要爬取的，我们先从第一篇的链接开始。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggVSS.png" alt="ggVSS.png"></p><blockquote><p>这时候我们就要想我们应该怎么样去获取到这个页面的链接了，如果正则表达式好的同学应该是想到了采取正则表达式进行获取，但是这里有一个问题，一个html页面中有如此多的a开头的元素，也有如此多的href开头的元素，想要通过正则去定位还是有点难的，就算定位出来，也是一大堆的代码，这就不利于可读性了。这时我们应该再从html文本中去分析。我们使用type函数进行类型的判断。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggZQg.png" alt="ggZQg.png"></p><blockquote><p>通过对pageContent的类型分析，我们知道这是一个字符串类型，这样我们就可以使用字符串中的find函数了，我们需要对find函数有一个了解。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggeyQ.png" alt="ggeyQ.png"></p><blockquote><p>函数中说明了从字符串中寻找目标字符，返回找到的第一个下标，如果没有找到就返回-1,同时可以设置开始寻找的位置和结束的位置。我们再看到文本。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggmLj.png" alt="ggmLj.png"></p><blockquote><p>我们发现是在div class=“liszw”下的li元素中的a元素中含有我们需要的链接，这时我们一个个来分析。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggues.png" alt="ggues.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggKwn.png" alt="ggKwn.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggMoq.png" alt="ggMoq.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/gglF0.png" alt="gglF0.png"><br></p><blockquote><p>这时我们发现这和我们所要爬取的链接数量上是完全吻合的。我们就来试试。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/gg1YV.png" alt="gg1YV.png"></p><blockquote><p>这里我们采取了一个切片操作，这时我们发现链接其实已经爬取到了，但是还是有些不完美，我们再来完善一下他。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/gg3WT.png" alt="gg3WT.png"></p><blockquote><p>我们来对比一下我们的网页上的第一个链接</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggGSU.png" alt="ggGSU.png"></p><h3 id="保存信息"><a href="#保存信息" class="headerlink" title="保存信息"></a>保存信息</h3><blockquote><p>这样我们就成功的爬取了第一个链接，现在我们来准备下载第一篇文章。从前面我们可以知道，我们可以把网页通过python的urllib模块下载下来，那么同样的道理，我一样也可以通过urllib模块对文章进行下载。我们通过链接的最后一串数字对下载下来的文件进行命名。并在下载玩后打印end进行提示。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggJlF.png" alt="ggJlF.png"></p><blockquote><p>我们可以看到，路径下是没有文件的。现在我们开始下载。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggYy4.png" alt="ggYy4.png"></p><blockquote><p>从这里看我们的文件应该是下载成功了，我们去文件路径下面看看。</p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggtOJ.png" alt="ggtOJ.png"></p><blockquote><p>文件下载是成功了，我们来打开看看。<font color="#800080">这个地方要注意地址栏的链接</font></p></blockquote><p><img src="https://s1.ax1x.com/2017/11/18/ggUm9.png" alt="ggUm9.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggawR.png" alt="ggawR.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggdT1.png" alt="ggdT1.png"><br></p><blockquote><p>这样，通过三个步骤，我们的爬虫就已经完成了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章算是我刚刚开始学爬虫的时候写的一个笔记了，现在整理出来，也算是一个分享过程吧。爬虫总体归纳来说就是三个步骤，获取网页源码，定位信息，提取保存信息，我们一个一个来说。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://damiantuan.xyz/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python,爬虫" scheme="http://damiantuan.xyz/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://damiantuan.xyz/2017/11/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://damiantuan.xyz/2017/11/18/我的第一篇文章/</id>
    <published>2017-11-18T06:09:13.000Z</published>
    <updated>2017-11-18T07:54:11.772Z</updated>
    
    <content type="html"><![CDATA[<p>其实第一篇文章也不知道说什么好，简单的就说说搞博客的这件事吧。</p><a id="more"></a><h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a><strong>第一篇文章</strong></h2><blockquote><p>其实第一篇文章也不知道说什么好，之前对前端的知识只是掌握了一点HTML+CSS，其他的不会太多，也没有用Markdown语法写过什么东西，这是第一次尝试，这第一篇文章就当作是一个test吧，因为我也不知道有什么效果。因为第一篇文章，我也想随便写点什么东西，简单的就说说搞博客的这件事吧。</p></blockquote><h2 id="来说说为什么开个博客"><a href="#来说说为什么开个博客" class="headerlink" title="来说说为什么开个博客"></a><strong>来说说为什么开个博客</strong></h2><blockquote><p>这个问题其实也很好解释，朋友圈已经沦陷了，成了微商和投票专用的通告栏，还成为了七大姑八大姨八卦的云聊天室，所以个人微信上已经不怎么用了。<br>关于QQ空间这个其实和微信的朋友圈差不多，成了卖东西的地方和鸡汤遍地之所，而且朋友们很多都已经不玩QQ空间了，而且空间也并不是一个开放的地方，同时很多敏感的代码会被和谐掉，所以形同鸡肋。而且朋友中搞这个的人并不太多，交流还是少的。<br></p></blockquote><h2 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a><strong>关于hexo</strong></h2><blockquote><p>hexo的好处有很多，什么简单啊，可以免费使用github的空间之类的，这些文章网上有很多了，一搜就能够搜到一大堆，其中不乏大牛的源码分析，我也写不出什么东西来。只能说选这个静态博客框架纯粹是因为自己懒，不想去搞服务器也不想去配置什么东西了，而且别到时候没有续费就把东西全部清理掉了那才是坑，也不想到别的什么博客平台去注册什么账号的，因为很有可能自己写的文章就突然间不见了，就想着简简单单的写点东西，第一个算是自己在学习的路上做个笔记，第二个也是可以分享出来给大家看，技术这点东西其实没什么可以隐瞒的，不过你学得比人家多你就知道一些人家暂时还不知道的东西而已，多分享一下自己踩过的坑，后面的人的路就会顺一点。同时也是督促自己要去学习吧，毕竟博客总不更新会觉得怪怪的，说我好学也好，装哔也罢，不动脑不动笔写点东西，整个人都快生锈了。</p></blockquote><h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a><strong>关于博客</strong></h2><blockquote><p>开个博客总要写点什么吧，其实我也不太清楚最后这个博客会变成什么样子，慢慢写的，自己学到什么东西就写点什么东西吧，不过总的来说应该都是python方面的学习笔记，偶尔会有点经济学，经济行为学和心理学与管理学方面的文章穿插进来。就这样吧，像背景音乐中的一句，就老去吧，孤独别醒来，你渴望的离开，只是无处停摆。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实第一篇文章也不知道说什么好，简单的就说说搞博客的这件事吧。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://damiantuan.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://damiantuan.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
