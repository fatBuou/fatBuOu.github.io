<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/02/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="just-test"><a href="#just-test" class="headerlink" title="just test"></a>just test</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511496576&amp;di=e623116599413655c9f56a092b579092&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fdl.bizhi.sogou.com%2Fimages%2F2012%2F05%2F3%2F6990.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈HTTP中Get与Post]]></title>
      <url>/2017/12/09/%E6%B5%85%E8%B0%88HTTP%E4%B8%ADGet%E4%B8%8EPost/</url>
      <content type="html"><![CDATA[<p>前面的一部分是自己参考网上的一些比较浅显易懂的文章写的，也引用了一些段子；第二部分就是正儿八经的搞知识了。<br><a id="more"></a></p>
<h3 id="装逼部分"><a href="#装逼部分" class="headerlink" title="装逼部分"></a>装逼部分</h3><p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。<br>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。<br>其实网络传输方法有很多种，一个表格可以全部概述。</p>
<table>
<thead>
<tr>
<th>HTTPMethod</th>
<th style="text-align:center">RFC</th>
<th style="text-align:center">Request Has Body</th>
<th style="text-align:center">Response Has Body</th>
<th style="text-align:center">safe</th>
<th style="text-align:center">Idempotent</th>
<th style="text-align:center">Cacheable</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td>HEAD</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td>POST</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td>PUT</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td>DELETE</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td>CONNECT</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td>OPTIONS</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">Optional</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td>TRACE</td>
<td style="text-align:center">RFC7231</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td>PATCH</td>
<td style="text-align:center">RFC5789</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<p>关于POST方法与GET方法的区别，很多教科书或是计算机类的书籍都会像下面这样写，恩，大致意思就是这样</p>
<blockquote>
<p>GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。 GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST么有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 GET参数通过URL传递，POST放在Request body中。</p>
</blockquote>
<p>然而这并不具有技术上的普适性，甚至有些说法还是错误的，比如说URL并没有长度的限制，URL长度的限制是与浏览器与系统有关的，其中所说的系统包括终端系统和服务端系统，URl在产生的时候其本身并没有任何的限制；再者来说安全性的问题，我只能说不考虑应用情景的所谓安全性都是在耍流氓。</p>
<p>首先我们要明白什么GET和POST。<br>答案：HTTP协议中的两种发送请求的方法。说明白点，就是通信方式。比如A要联系B，那么A可以选择打电话或是发短信，微信和QQ，还可以写信，这其中不管那种方法都可以联系都B，只不过是形式不一样。<br>HTTP是什么？<br>答案：HTTP（超文本传输协议（HTTP，HyperText Transfer Protocol)）是基于TCP/IP的关于数据如何在万维网中如何通信的协议。这个有点像使用说明。互联网上面两台计算机互不相识，谁也不知道谁，HTTP中说明了一系列的东西，协议版本号，接受的字符类型，客户信息和内容之类的。就像你接到一分书信，一开始写明了是用中文书写的，你要找会中文的人，然后发现这种中文隶书写的，你还要从会中文的人中筛选出一个能看隶书的人来，然后······经过一系列的努力，这样到最后就可以解读出这份书信了。<br>TCP/IP是什么？<br>答案：Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。再说明白点，TCP/IP就是规定了互联网中计算机如何通信的协议，就像写信的时候是邮局告诉你规定邮政编码一样。</p>
<p>这样看，我们知道HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p>
<p>在万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签(设置method为GET)，而且要求把传送的数据放在车顶上(url中)以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩;也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p>
<p>GET和POST还有一个重大区别，简单的说：<br>GET产生一个TCP数据包;POST产生两个TCP数据包。<br>长的说：<br>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。<br>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。<br>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑!跳入需谨慎。为什么?</p>
<ol>
<li>GET与POST都有自己的语义，不能随便混用。</li>
<li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li>
<li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。<br>很好，这就是装逼的第一步，完成了。</li>
</ol>
<h3 id="不装逼部分"><a href="#不装逼部分" class="headerlink" title="不装逼部分"></a>不装逼部分</h3><blockquote>
<p>第二部分引用陈曦明的文章，出于对知识的敬畏，不装逼了，认认真真搞。</p>
</blockquote>
<p>　　Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>
<p>　　1.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p>
<p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>
<p>　　* 注意：这里安全的含义仅仅是指是非修改信息。</p>
<p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p>
<p>　　幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>　　幂等有一下几种定义：<br>　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。<br>　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。<br>看完上述解释后，应该可以理解GET幂等的含义了。</p>
<p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p>
<p>　　2.根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p>
<p>　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p>
<p>　　1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p>
<p>　　2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p>
<p>　　3.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p>
<p> 　　* 简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</p>
<p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。</p>
<p>　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p>
<p>　　1.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p>
<p>　　POST把提交的数据则放置在是HTTP包的包体中。</p>
<p>　　2.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p>
<p>　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p>
<p>　　(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p>
<p>　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]</p>
<p>　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p>
<p>　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p>
<p>　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p>
<p>　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。<br>　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。<br>　　　　 3).IIS 6.0默认最大请求头是16KB。<br>　　IIS 6.0之前没有这些限制。[见参考资料5]</p>
<p>　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p>
<p>　　3.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\”XXXX\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&amp;password=hyddd，用request.getQueryString()得到的是：name=hyddd&amp;password=hyddd。在PHP中，可以用\$_GET和\$_POST分别获取GET和POST中的数据，而\$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p>
<p>　　4.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p>
<p>　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p>
<p>参考资料：</p>
<p>[1].<a href="http://hi.baidu.com/liuzd003/blog/item/7bfecbfa6ea94ed8b58f318c.html" target="_blank" rel="external">http://hi.baidu.com/liuzd003/blog/item/7bfecbfa6ea94ed8b58f318c.html</a></p>
<p>[2].<a href="http://www.blogjava.net/onlykeke/archive/2006/08/23/65285.aspx" target="_blank" rel="external">http://www.blogjava.net/onlykeke/archive/2006/08/23/65285.aspx</a></p>
<p>[3].<a href="http://baike.baidu.com/view/2067025.htm" target="_blank" rel="external">http://baike.baidu.com/view/2067025.htm</a></p>
<p>[4].<a href="http://www.chxwei.com/article.asp?id=373" target="_blank" rel="external">http://www.chxwei.com/article.asp?id=373</a></p>
<p>[5].<a href="http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx" target="_blank" rel="external">http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx</a></p>
<blockquote>
<p>引用地址：<a href="https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页状态码及其处理]]></title>
      <url>/2017/12/03/%E7%BD%91%E9%A1%B5%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>记录一下在学习爬虫过程中遇到的几种网页的状态码以及处理方法</p>
<a id="more"></a>
<p>写几个主要的，像200这样访问成功的状态码就没有必要写下来了。</p>
<h3 id="状态码及其含义"><a href="#状态码及其含义" class="headerlink" title="状态码及其含义"></a>状态码及其含义</h3><p> 400 Bad Request 客户端请求有语法错误，不能被服务器所理解<br> 401 Unauthorized 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br> 403 Forbidden 服务器收到请求，但是拒绝提供服务<br> 404 Not Found 请求资源不存在，eg：输入了错误的URL<br> 500 Internal Server Error 服务器发生不可预期的错误<br> 503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p>
<h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><p>400 Bad Request - 检查请求的参数或者路径</p>
<p>401 Unauthorized - 如果需要授权的网页，尝试重新登录</p>
<p>403 Forbidden</p>
<ul>
<li>如果是需要登录的网站，尝试重新登录</li>
<li>IP被封，暂停爬取，并增加爬虫的等待时间，如果拨号网络，尝试重新联网更改IP</li>
</ul>
<p>404 - Not Found 直接丢弃<br>5XX - 服务器错误，直接丢弃，并计数，如果连续不成功，WARNING 并停<br>止爬取</p>
]]></content>
      
        <categories>
            
            <category> python,爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算上证日K与个股的相关性系数]]></title>
      <url>/2017/11/21/%E8%AE%A1%E7%AE%97%E4%B8%8A%E8%AF%81%E6%97%A5K%E4%B8%8E%E4%B8%AA%E8%82%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E6%80%A7%E7%B3%BB%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这算是一个面试的题吧。需求是把与上证日K趋势的相关性系数大于80%的个股挑选出来。<br><a id="more"></a><br>这是一个面试题，当时面试一个做量化交易的公司的一个面试题，不过对方对我这个脚本似乎不太满意，面试的后续就没有后续了。</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h2><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><blockquote>
<p>在上交所正常盘面交易的股票大约有3400多只，如果写爬虫去获取每一只股票的相关信息那么工程量肯定不小，当然加上现在各个金融网站的反爬手段，单单写爬虫这点可能都会卡住，就在网上看看有没有什么免费的API可以使用，无意间找到了tushare这个模块，全中文手册，使用全免费，这个当然是不错的。后面在使用的过程中发现在获取当日交易情况的时候会出现不稳定然后中断获取的情况，这个······毕竟免费的而且没有像各个官方的限制，其实还是很不错的，而且也提供了大量的方法可以使用。</p>
</blockquote>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><blockquote>
<p>在获取完数据之后应该对数据进行处理，我查看了一下tushare输出的数据类型，基本上都是DataFormat的类型，这点处理上是比较有利的，但是考虑到tushare在获取数据的时候的稳定性情况，我决定不直接使用网络数据，转而使用把数据保存到本地后再使用，在使用完成后我们可以对本地文件进行删除。在这里我不考虑对每一项数据都进行入库处理，因为tushare提供了一个将数据保存的本地的方法，使用起来也十分方便。</p>
</blockquote>
<h3 id="提取结果"><a href="#提取结果" class="headerlink" title="提取结果"></a>提取结果</h3><blockquote>
<p>每只股票的代码是6位数，相关性系数检验在80%以上的应该不会很多，所以我采用直接将股票代码保存在一个txt文本文件中。</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><h3 id="获取有效股票代码"><a href="#获取有效股票代码" class="headerlink" title="获取有效股票代码"></a>获取有效股票代码</h3><blockquote>
<p>选择使用tushre之后，知道了如何获取个股的数据和上证指数，但是模块中没有提供我想要的单单的股票代码，我也不能用循环去生成股票代码，虽然说股票的代码确实是有顺序的，但是不敢保证生成的股票代码的那只股票现在是否还在市。想想，如果可以获取当日的交易的所有股票行情的话这个问题不就解决了，因为当日还在交易的所有股票肯定还没有退市的。查一下手册，发现有一个函数是一次性获取当前交易所有股票的行情数据，ok就是他了。获取到了之后保存为本地excel表格，再从表格中读取股票代码。</p>
</blockquote>
<h3 id="计算K线趋势"><a href="#计算K线趋势" class="headerlink" title="计算K线趋势"></a>计算K线趋势</h3><blockquote>
<p>后面发现使用tushare获取的数据并没有计算出当日的K线的走势，不过没关系了，他给出的数据中有一天的开盘价，收盘价，最高价和最低价，这些足够计算当日的K线了。正值为红，负值为绿。在计算的过程中发现读出来的数据是一个列表，其中包括表头的值，于是取下标从1开始。列表的计算在python并不是很方便，因为python并没有像c一样提供一个数组的数据结构，幸好前几天刚刚学习了numpy模块，现学现卖了，把读取出来的列表通过numpy模块转换成数组，再使用numpy模块内置算法计算，这样大大的减少了工作量。</p>
</blockquote>
<h3 id="相关性系数"><a href="#相关性系数" class="headerlink" title="相关性系数"></a>相关性系数</h3><blockquote>
<p>Pearson系数也称为是简单相关性系数，但是计算中要求两个计算的量近似服从二维的正态分布，而上证K线的趋势和个股K线的趋势其实并没有什么规律，不能使用这个，于是采用Spearman系数，Spearman系数在计算的过程中并不要求计算的两组数字的分布规律。</p>
</blockquote>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><blockquote>
<p>工作流程就是获取上证指数的信息，保存为表格，读表，计算K线，获取当日交易情况，保存为表格，读表，处理，得出个股编号，再通过编号去获取该股票的历史数据，保存为表格，读表，计算K线，再把个股的K线与上证的K线从获取之日开始计算，得出Spearman系数，最后把大于Spearman系数大于80%的个股编号保存下来，不满足条件的直接忽略。最后计算完该股票后把保存该股票信息的excel表格删掉，减少占用磁盘空间。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># *-*coding='UTF-8'*-*</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> pandas</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 获取上证指数的K线</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getshangzheng_K</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">#读取上证指数的日K</span></div><div class="line">    shangzheng = ts.get_hist_data(<span class="string">'sh'</span>,ktype=<span class="string">'D'</span>,start=<span class="string">'2017-07-01'</span>)</div><div class="line">    <span class="comment"># 将上证指数的日K存入excel表格</span></div><div class="line">    shangzheng.to_excel(<span class="string">'sh.xlsx'</span>,sheet_name=<span class="string">'Sheet1'</span>)</div><div class="line">    (filepath,tempfilename)=os.path.split(<span class="string">'sh.xlsx'</span>)</div><div class="line">    <span class="keyword">return</span> tempfilename</div><div class="line"></div><div class="line"><span class="comment"># 读取excel表格</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(fileName=<span class="string">''</span>,sheet=<span class="string">'Sheet1'</span>)</span>:</span></div><div class="line">    workbook=xlrd.open_workbook(fileName)</div><div class="line">    sheet1=workbook.sheet_by_name(sheet)</div><div class="line">    <span class="keyword">return</span> sheet1</div><div class="line"></div><div class="line"><span class="comment"># 计算K线的趋势</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">K</span><span class="params">(sheet,open_col_values=False,close_col_values=False)</span>:</span></div><div class="line">    open_price=sheet.col_values(open_col_values)</div><div class="line">    close_price=sheet.col_values(close_col_values)</div><div class="line">    open_price_array=np.array(open_price[<span class="number">1</span>:],dtype=float)</div><div class="line">    close_price_array=np.array(close_price[<span class="number">1</span>:],dtype=float)</div><div class="line">    movements=close_price_array-open_price_array</div><div class="line">    the_k=pandas.Series(movements)</div><div class="line">    <span class="keyword">return</span> the_k</div><div class="line"></div><div class="line"><span class="comment"># 获取上证交易所中当日正在交易的所有股票信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_today_stock</span><span class="params">()</span>:</span></div><div class="line">    todayall=ts.get_today_all()</div><div class="line">    todayall.to_excel(<span class="string">'todays.xlsx'</span>)</div><div class="line">    (filepath,tempfilename)=os.path.split(<span class="string">'todays.xlsx'</span>)</div><div class="line">    <span class="keyword">return</span> tempfilename</div><div class="line"></div><div class="line"><span class="comment"># 获取上证中正在交易的股票的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stock_num</span><span class="params">(sheet=<span class="string">''</span>)</span>:</span></div><div class="line">    todaycols=sheet.col_values(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> todaycols</div><div class="line"></div><div class="line"><span class="comment"># 获取个股的详细信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stock_info</span><span class="params">(stock_num)</span>:</span></div><div class="line">    stock_number=str(stock_num)</div><div class="line">    stock_info=ts.get_hist_data(stock_number,start=<span class="string">'2017-07-01'</span>,ktype=<span class="string">'D'</span>)</div><div class="line">    stock_info.to_excel(stock_number+<span class="string">'.xlsx'</span>)</div><div class="line">    (filepath,tempfilename)=os.path.split(stock_number+<span class="string">'.xlsx'</span>)</div><div class="line">    <span class="keyword">return</span> tempfilename</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 计算相关性系数，因为数据分布无规则，所以计算spearman相关系数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_spearman</span><span class="params">(sh,stock)</span>:</span></div><div class="line">    corr_spearman=sh.corr(stock,method=<span class="string">'spearman'</span>)</div><div class="line">    <span class="keyword">return</span> corr_spearman</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#获取上证信息并保存为表格 </span></div><div class="line">    sh_excel=getshangzheng_K()</div><div class="line">    <span class="comment">#读取上证信息表格 </span></div><div class="line">    sh_sheet=read_excel(sh_excel,sheet=<span class="string">'Sheet1'</span>)</div><div class="line">    <span class="comment"># 计算上证日K的趋势</span></div><div class="line">    sh_K=K(sh_sheet,open_col_values=<span class="number">1</span>,close_col_values=<span class="number">3</span>)</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 计算个股的日K趋势</span></div><div class="line">    today_stock_exccel=get_today_stock()</div><div class="line">    <span class="comment">#实际使用中，read_excel函数的第一个参数可以直接写成文件名，这样不必每次执行都重复去获取数据 </span></div><div class="line">    today_sheet=read_excel(today_stock_exccel,sheet=<span class="string">'Sheet1'</span>)</div><div class="line">    stock_nums=get_stock_num(today_sheet)</div><div class="line">    <span class="keyword">for</span> stock_num <span class="keyword">in</span> stock_nums[<span class="number">1</span>:]:</div><div class="line">        </div><div class="line">        stock_excel=get_stock_info(stock_num)</div><div class="line">        stock_sheet=read_excel(fileName=stock_excel,sheet=<span class="string">'Sheet1'</span>)</div><div class="line">        stock_K=K(sheet=stock_sheet,open_col_values=<span class="number">1</span>,close_col_values=<span class="number">3</span>)</div><div class="line">        <span class="comment">#以上为计算个股的K线趋势 </span></div><div class="line"></div><div class="line">        <span class="comment">#此处计算Spearman系数 </span></div><div class="line">        spearman=find_spearman(sh_K,stock_K)</div><div class="line">        <span class="keyword">if</span> spearman&gt;<span class="number">0.800</span>:</div><div class="line">            <span class="keyword">with</span> open(<span class="string">'save.txt'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> fp:</div><div class="line">                fp.write(str(stock_num).encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                <span class="keyword">print</span> <span class="string">'done one'</span>,time.strftime(<span class="string">"%Y-%m-%d %X"</span>, time.localtime())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'let one go'</span>,time.strftime(<span class="string">"%Y-%m-%d %X"</span>, time.localtime())</div><div class="line">        <span class="comment">#这句为删除使用过的表格，如果想保留相关表格，可以将其注释掉 </span></div><div class="line">        os.remove(str(stock_num)+<span class="string">'.xlsx'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>在实际使用的过程中我们可以将上证的表格和当日成交的表格给保留下来，并在代码中注释掉相应的执行语句，将文件名直接填成参数，这样可以避免获取数据的时候tushare的不稳定造成的影响。</p>
<p>最后，计算的结果为300719    300716    002781    000555    </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 量化分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -python -量化分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[scrapy爬取当当网所有3c产品商品名称，价格，评论数]]></title>
      <url>/2017/11/19/scrapy%E7%88%AC%E5%8F%96%E5%BD%93%E5%BD%93%E7%BD%91%E6%89%80%E6%9C%893c%E4%BA%A7%E5%93%81%E5%95%86%E5%93%81%E5%90%8D%E7%A7%B0%EF%BC%8C%E4%BB%B7%E6%A0%BC%EF%BC%8C%E8%AF%84%E8%AE%BA%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。<br>Scrapy 使用 Twisted这个异步网络库来处理网络通讯，架构清晰，并且包含了各种中间件接口，可以灵活的完成各种需求。</p>
</blockquote>
<a id="more"></a>
<h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a><strong>Scrapy</strong></h2><blockquote>
<p>首先祭上scrapy的工作流程图。</p>
</blockquote>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511092073824&amp;di=8e562aa102ed8fa398db5907bfc4cb95&amp;imgtype=0&amp;src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fd52a2834349b033b2f5311531cce36d3d439bd64.jpg" alt="scrapy"></p>
<blockquote>
<p>我们暂时不去管scrapy的设计，先看看怎么用先。</p>
<p>在命令终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scrapy startproject dangdang</div><div class="line">cd dangdang</div><div class="line">scrapy genspider dangdangwang dangdang.com</div></pre></td></tr></table></figure></p>
<p>解释一下上面的命令的含义，startporject是新建一个工程，cd就是到新建的工程项目文件夹下，genspider是依照模板生成一个爬虫，默认状态是basic模板。</p>
<p>在工程文件夹下的终端输入tree就可以得到如下的文件，如果输入tree显示找不到该命令的话，先安装一个小软件，apt-get install tree ,附上tree的手册<a href="https://linux.die.net/man/1/tree" target="_blank" rel="external">tree(1) - Linux man page</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">tree </div><div class="line">.</div><div class="line">├── 201708260.txt</div><div class="line">├── dangdang</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── __init__.pyc</div><div class="line">│   ├── items.py</div><div class="line">│   ├── items.pyc</div><div class="line">│   ├── middlewares.py</div><div class="line">│   ├── pipelines2excel.py</div><div class="line">│   ├── pipelines.py</div><div class="line">│   ├── pipelines.pyc</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── settings.pyc</div><div class="line">│   └── spiders</div><div class="line">│       ├── dangdangwang.py</div><div class="line">│       ├── dangdangwang.pyc</div><div class="line">│       ├── __init__.py</div><div class="line">│       └── __init__.pyc</div><div class="line">└── scrapy.cfg</div></pre></td></tr></table></figure></p>
<p>文件布局如上面树所示</p>
</blockquote>
<h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="修改item-py文件"><a href="#修改item-py文件" class="headerlink" title="修改item.py文件"></a>修改item.py文件</h3><blockquote>
<p>item.py是定义scrapy抓取信息的地方，相当与你在这里要为你想得到的每一种信息都要取一个名字，名字当然是见字知意最好了。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Define here the models for your scraped items</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># See documentation in:</span></div><div class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="comment"># define the fields for your item here like:</span></div><div class="line">    <span class="comment"># name = scrapy.Field()</span></div><div class="line">    <span class="comment"># 商品名称</span></div><div class="line">    title=scrapy.Field()</div><div class="line">    <span class="comment"># 评论数</span></div><div class="line">    num=scrapy.Field()</div><div class="line">    <span class="comment"># 价格</span></div><div class="line">    price=scrapy.Field()</div><div class="line">    <span class="comment"># 页面链接</span></div><div class="line">    link=scrapy.Field()</div></pre></td></tr></table></figure>
<h3 id="修改dangdangwang-py文件"><a href="#修改dangdangwang-py文件" class="headerlink" title="修改dangdangwang.py文件"></a>修改dangdangwang.py文件</h3><blockquote>
<p>dangdangwang.py文件位于spiders文件夹下，是爬虫的主要行为，他定义了如何去定位信息，把什么信息赋值给哪个item。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> dangdang.items <span class="keyword">import</span> DangdangItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangwangSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"dangdangwang"</span></div><div class="line">    allowed_domains = [<span class="string">"dangdang.com"</span>]</div><div class="line">    start_urls = [<span class="string">'http://category.dangdang.com/pg1-cid4002590.html'</span>]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># 每一个商品的点击链接（详情链接）</span></div><div class="line">        url_list=response.xpath(<span class="string">'.//*[@id="component_0__0__8609"]/li/p[@class="name"]/a/@href'</span>).extract()</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">            <span class="keyword">yield</span> scrapy.http.Request(url,callback=self.parse_name)</div><div class="line">        <span class="comment"># 搜索分类的分页</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">98</span>):</div><div class="line">            page_url=<span class="string">'http://category.dangdang.com/pg&#123;&#125;-cid4002590.html'</span>.format(i)</div><div class="line">            <span class="keyword">yield</span> scrapy.http.Request(page_url,callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_name</span><span class="params">(self,response)</span>:</span></div><div class="line">        items=DangdangItem()</div><div class="line">        items[<span class="string">'title'</span>]=response.xpath(<span class="string">'//div[@class="name_info"]/h1/text()'</span>).extract()</div><div class="line">        items[<span class="string">'num'</span>]=response.xpath(<span class="string">'//div[@class="pinglun"]/a/text()'</span>).extract()</div><div class="line">        items[<span class="string">'price'</span>]=response.xpath(<span class="string">'//div[@class="price_d"]/p[@id="dd-price"]/text()'</span>).extract()</div><div class="line">        items[<span class="string">'link'</span>]=response.url</div><div class="line">        <span class="keyword">yield</span> items</div></pre></td></tr></table></figure>
<h3 id="修改pipelines-py"><a href="#修改pipelines-py" class="headerlink" title="修改pipelines.py"></a>修改pipelines.py</h3><blockquote>
<p>pipelines.py文件是定义了爬取的数据如何保存的文件，就像他的名字一样，数据的管道。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># Define your item pipelines here</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></div><div class="line"><span class="comment"># See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># print u"商品名字："+item['title'][0]</span></div><div class="line">        <span class="comment"># print u"商品价格："+item['price'][0]</span></div><div class="line">        <span class="comment"># print u"商品评论数"+item['num'][0]</span></div><div class="line">        <span class="comment"># return item</span></div><div class="line">        today = time.strftime(<span class="string">'%Y%m%d'</span>, time.localtime())</div><div class="line">        fileName = today + <span class="string">'.txt'</span></div><div class="line">        <span class="keyword">with</span> open(fileName,<span class="string">'a'</span>) <span class="keyword">as</span> fp:</div><div class="line">                fp.write(item[<span class="string">'title'</span>][<span class="number">0</span>].replace(<span class="string">' '</span>,<span class="string">''</span>).encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                fp.write(<span class="string">"价格"</span>+item[<span class="string">'price'</span>][<span class="number">0</span>].encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                fp.write(<span class="string">"评论数"</span>+item[<span class="string">'num'</span>][<span class="number">0</span>].encode(<span class="string">'utf8'</span>) + <span class="string">'\t'</span>)</div><div class="line">                fp.write(<span class="string">'\n'</span>)</div><div class="line">                <span class="comment"># time.sleep(1)</span></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<blockquote>
<p>这里定义的是将数据保存到一个txt记事本。效果如图所示</p>
</blockquote>
<p><a href="https://imgchr.com/i/gjLDA" target="_blank" rel="external"><img src="https://s1.ax1x.com/2017/11/19/gjLDA.md.png" alt="gjLDA.md.png"></a></p>
]]></content>
      
        <categories>
            
            <category> python爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -python -爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[py+bs+requests多线程爬虫]]></title>
      <url>/2017/11/19/py-bs-requests%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>还是那个站，不过我们这次不再一个一个来爬取了，我们将采用多线程进行爬取。<br><a id="more"></a></p>
<p>python的多线程问题一直是一个备受争议的话题，因为在多核心CPU的硬件条件下，python依然还是只能利用单核心，所以python的多线程就有一个“伪多线程”的命题，但是python多线程虽然是只能利用单核心，但是依旧比单线程要快。</p>
<p>思路还是一样，不过在最后处理的时候我们引入了一个多线程。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'"Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0"'</span>&#125;</div><div class="line"><span class="comment"># 读取网页源码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">    htmls=requests.get(url,headers=header)</div><div class="line">    <span class="comment"># 发现网页是用GBK编码的，在此处进行转码</span></div><div class="line">    htmls.encoding = <span class="string">'gb2312'</span> </div><div class="line">    <span class="comment"># 调用text将对象进行字符化</span></div><div class="line">    pageContent=htmls.text</div><div class="line">    <span class="keyword">return</span> pageContent</div><div class="line"></div><div class="line"><span class="comment"># 进行文章url的获取</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContentUrl</span><span class="params">(html)</span>:</span></div><div class="line">    urls=[]</div><div class="line">    bsContent=BeautifulSoup(html,<span class="string">'html.parser'</span>)</div><div class="line">    urlContent=bsContent.find(class_=<span class="string">"liszw"</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> urlContent.find_all(<span class="string">'a'</span>):</div><div class="line">        url_lib=link.get(<span class="string">'href'</span>)</div><div class="line">        urls.append(url_lib)</div><div class="line">    <span class="keyword">return</span> urls</div><div class="line"></div><div class="line"><span class="comment">#文章内容的获取</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readContent</span><span class="params">(urls)</span>:</span></div><div class="line">    articleHtml=getHtml(urls)</div><div class="line">    <span class="comment"># print articleHtml</span></div><div class="line">    bsContent=BeautifulSoup(articleHtml,<span class="string">'html.parser'</span>)</div><div class="line">    title=bsContent.find(<span class="string">'h2'</span>).string</div><div class="line">    content=bsContent.find(class_=<span class="string">"arwzks"</span>)</div><div class="line">    article=content.get_text()</div><div class="line">    txt=article.encode(<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">print</span> title+<span class="string">' start'</span></div><div class="line">    open(<span class="string">r'/home/wukong/testTuiLiXue/download/'</span>+title.encode(<span class="string">"utf-8"</span>)+<span class="string">'.txt'</span>,<span class="string">'w+'</span>).write(txt)</div><div class="line">    <span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %X'</span>,time.localtime(time.time()))+title+<span class="string">' end'</span></div><div class="line">    <span class="comment"># print txt</span></div><div class="line">    <span class="keyword">return</span> txt</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#后面的参数为CPU的核心数，虽然说只能利用单核心 </span></div><div class="line">    pool = ThreadPool(<span class="number">4</span>)</div><div class="line">    links=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</div><div class="line">        links.append(<span class="string">'http://tuilixue.com/zhentantuilizhishi/list_4_'</span>+str(i)+<span class="string">'.html'</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">        html=getHtml(link)</div><div class="line">        urls=getContentUrl(html)</div><div class="line">        url=[]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>):</div><div class="line">            url.append(urls[i])</div><div class="line">        <span class="comment"># for i in url:</span></div><div class="line">        <span class="comment">#     result = readContent(i)</span></div><div class="line">        result=pool.map(readContent,url)</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -python -爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BeautifulSoup爬虫代码]]></title>
      <url>/2017/11/19/BeautifulSoup%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>还是上次的那个网站，不过这次我们用request+beautifulsoup来进行爬取了。<br><a id="more"></a></p>
<p>思路和上次的那个基本上是一样的，不过就是把定位信息的方法从原来的使用python内置的str模块中的函数方法改成了使用beautifulsoup这个第三方的模块，这个模块的手册在网上能找到，翻译得不错，基本上是一看就懂的那种。注释的话我这次没写了，因为和上次一样的，想看注释的可以去看上一篇文章。</p>
<p>这次的存储方法与上次使用urllib的有所不同，上次的存储是直接保存HTML文件的要使用一些处理结构性文档的工具才能查看文章的内容，而且文件命名也是使用的网站上的URL来进行的，这样的命名毫无意义也就无法知道文件中的内容是什么，所以这次我们把爬取的文章标题作为文件名，保存为txt记事本文件。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">url=[<span class="string">''</span>]*<span class="number">20</span></div><div class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'"Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0"'</span>&#125;</div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</div><div class="line">    htmls=requests.get(<span class="string">'http://tuilixue.com/zhentantuilizhishi/list_4_'</span>+str(page)+<span class="string">'.html'</span>,headers=header)</div><div class="line">    htmls.encoding = <span class="string">'gb2312'</span> </div><div class="line">    pageContent=htmls.text</div><div class="line">    txt=pageContent</div><div class="line"><span class="comment"># print type(txt)</span></div><div class="line"><span class="comment"># open(r'/home/wukong/testTuiLiXue/download/123.txt','w+').write(txt.encode('utf-8'))</span></div><div class="line"><span class="comment"># print content</span></div><div class="line">    bsContent=BeautifulSoup(pageContent,<span class="string">'html.parser'</span>)</div><div class="line">    urlContent=bsContent.find(class_=<span class="string">"liszw"</span>)</div><div class="line">    lis=urlContent.find_all(<span class="string">'a'</span>)</div><div class="line">    lis=str(lis)</div><div class="line">    hrefHeader=lis.find(<span class="string">r'href='</span>)</div><div class="line">    hrefTrail=lis.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">    url[<span class="number">0</span>]=lis[hrefHeader+<span class="number">6</span>:hrefTrail<span class="number">-2</span>]</div><div class="line">    <span class="keyword">if</span> hrefHeader!=<span class="number">-1</span> <span class="keyword">and</span> hrefTrail!=<span class="number">-1</span>:</div><div class="line">        <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</div><div class="line">            hrefHeader=lis.find(<span class="string">r'href='</span>,hrefTrail)</div><div class="line">            hrefTrail=lis.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">            url[times]=lis[hrefHeader+<span class="number">6</span>:hrefTrail<span class="number">-2</span>]</div><div class="line">            <span class="comment"># print url[i]</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>):</div><div class="line">            articleHtml=requests.get(url[i],headers=header)</div><div class="line">            articleHtml.encoding=<span class="string">'gb2312'</span></div><div class="line">            articleContent=articleHtml.text</div><div class="line">            bsContent=BeautifulSoup(articleContent,<span class="string">'html.parser'</span>)</div><div class="line">            title=bsContent.find(<span class="string">'h2'</span>).string</div><div class="line">            content=bsContent.find(class_=<span class="string">"arwzks"</span>)</div><div class="line">            article=content.get_text()</div><div class="line">            txt=article.encode(<span class="string">'utf-8'</span>)</div><div class="line">            <span class="keyword">print</span> title+<span class="string">' start'</span></div><div class="line">            <span class="comment"># print txt</span></div><div class="line">            open(<span class="string">r'/home/wukong/testTuiLiXue/download/'</span>+title.encode(<span class="string">"utf-8"</span>)+<span class="string">'.txt'</span>,<span class="string">'w+'</span>).write(txt)</div><div class="line">            <span class="keyword">print</span> title+<span class="string">' end'</span></div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'finish'</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -python -爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三个步骤搞定一个爬虫--源码]]></title>
      <url>/2017/11/19/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB-%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里给出“三个步骤搞定一个爬虫的python源码”</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">url=[<span class="string">''</span>]*<span class="number">10</span></div><div class="line">title=[<span class="string">''</span>]*<span class="number">10</span></div><div class="line"><span class="comment"># 循环页数</span></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</div><div class="line">    pageContent=urllib.urlopen(<span class="string">'http://tuilixue.com/zhentantuilizhishi/list_4_'</span>+str(page)+<span class="string">'.html'</span>).read()</div><div class="line">    <span class="comment"># print pageContent</span></div><div class="line">    <span class="comment">#这一部分先找到某一页中的第一篇文章作为初始化</span></div><div class="line">    <span class="comment">#根据网页代码特性，发现只有需要的页面文章链接前面有/span&gt;&lt;a href=，于是找到页面中的/span&gt;&lt;a href=的下标开始</span></div><div class="line">    hrefHeader=pageContent.find(<span class="string">r'/span&gt;&lt;a href='</span>)</div><div class="line">    <span class="comment"># print hrefHeader</span></div><div class="line"></div><div class="line">    <span class="comment">#发现所需文章链接后面没有唯一的特性，于是从前面找到的下标开始找第一个target="_blank"&gt;的下标</span></div><div class="line">    hrefTrail=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">    <span class="comment"># print hrefTrail</span></div><div class="line"></div><div class="line">    <span class="comment">#根据找到的下标，增加一定的位数找到文章链接，就是一个切片操作</span></div><div class="line">    url[<span class="number">0</span>]=pageContent[hrefHeader+<span class="number">15</span>:hrefTrail<span class="number">-2</span>]</div><div class="line"></div><div class="line">    <span class="comment">#寻找文章标题</span></div><div class="line">    titleHead=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">    titleTrail=pageContent.find(<span class="string">r'&lt;/a&gt;'</span>,titleHead)</div><div class="line">    title[<span class="number">0</span>]=pageContent[titleHead+<span class="number">16</span>:titleTrail<span class="number">-1</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hrefHeader!=<span class="number">-1</span> <span class="keyword">and</span> hrefTrail!=<span class="number">-1</span>:</div><div class="line">        <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">            <span class="comment"># 从前面的找到的尾部下标开始寻找</span></div><div class="line">            hrefHeader=pageContent.find(<span class="string">r'/span&gt;&lt;a href='</span>,hrefTrail)</div><div class="line"></div><div class="line">            <span class="comment">#从上一步开始寻找</span></div><div class="line">            hrefTrail=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line"></div><div class="line">            <span class="comment">#根据找到的下标，增加一定的位数找到文章链接，就是一个切片操作</span></div><div class="line">            url[times]=pageContent[hrefHeader+<span class="number">15</span>:hrefTrail<span class="number">-2</span>]</div><div class="line"></div><div class="line">            <span class="comment">#寻找文章标题</span></div><div class="line">            titleHead=pageContent.find(<span class="string">r'target="_blank"&gt;'</span>,hrefHeader)</div><div class="line">            titleTrail=pageContent.find(<span class="string">r'&lt;/a&gt;'</span>,titleHead)</div><div class="line">            title[times]=pageContent[titleHead+<span class="number">16</span>:titleTrail<span class="number">-1</span>]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</div><div class="line">        <span class="comment">#分别读出每一个文章的url</span></div><div class="line">        articleContent=urllib.urlopen(url[times]).read()</div><div class="line">        <span class="keyword">print</span> <span class="string">"Start download~~"</span>+str(url[times][<span class="number">-9</span>:])</div><div class="line">        <span class="comment">#以html的格式保存</span></div><div class="line">        open(<span class="string">r'/home/wukong/testTuiLiXue/download/'</span>+url[times][<span class="number">-9</span>:].replace(<span class="string">'/'</span>,<span class="string">''</span>),<span class="string">'w+'</span>).write(articleContent)</div><div class="line">        <span class="keyword">print</span> <span class="string">"Download finish"</span>+str(page<span class="number">-1</span>)+str(times)</div><div class="line">        <span class="comment">#缓存时间为1s</span></div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"All finish"</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[三个步骤搞定一个爬虫（3）]]></title>
      <url>/2017/11/19/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%EF%BC%883%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>上两篇文章讲了怎么把整页的文章下载下来，这一次讲一下怎么把整个专栏的文章都下载下来。讲到这里，一个基础的爬虫基本上都完成了，所以技术方面这些东西并不是有什么神秘的，只是很多东西没有学到，没有思路就会觉得不可思议而已。<br><a id="more"></a></p>
<p>在我们开始之前我们先把上次遗留下来的问题解决一下。大家想一下，我们在之前是直接就去循环文章的链接了，尽管我们是根据html文档来进行分析判断的，但是似乎还是不够严谨，因为万一我们的判断失误了呢，那么程序就会没有响应并且一直卡在那里，因此我们应该加一个判断。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbkHf.png" alt="gbkHf.png"></p>
<blockquote>
<p>因为我们知道find函数在没有找到目标字符的时候返回-1,所以我们应该判断在不返回-1的情况下才对链接进行循环遍历。</p>
</blockquote>
<h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><blockquote>
<p>好了，这次我们是要下载整个推理讨论板块的所有文章，我们还是对网站进行分析先。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbEE8.png" alt="gbEE8.png"></p>
<blockquote>
<p>这是第一页的网址，我们再来看看第二页</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbVUS.png" alt="gbVUS.png"></p>
<blockquote>
<p>再来看看第三页</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbZ4g.png" alt="gbZ4g.png"></p>
<blockquote>
<p>很好，直觉告诉我们，最后的那个数字应该就是页数的意思了，我们试试改成1看看能不能回到第一页。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbmCQ.png" alt="gbmCQ.png"></p>
<blockquote>
<p>成功的回到了第一页，那么我们来看看需要循环几次</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbugs.png" alt="gbugs.png"></p>
<blockquote>
<p>一共有38页，372篇文章，我们先来写一个循环看看能不能正确循环出页数</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbKvn.png" alt="gbKvn.png"></p>
<blockquote>
<p>因为字符串是不能和整型相加的，并且urllib.openg也只能接受字符参数，所以我们这里用str（）把页数的数字转换为字符型，并且连接在网址上。测试一下</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gblD0.png" alt="gblD0.png"></p>
<blockquote>
<p>篇幅原因我就不全部截图了，但是我们可以看到，这个循环应该是可以把所有的页数都正确的表示出来的，那么我们现在就要把这个循环语句加到程序中去了。大家想想，我们应该是先到一个具体的页数，然后再爬取该页的链接和文章吧，所以我这个地方的循环应该是加在最外面的一个循环。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gb1bV.png" alt="gb1bV.png"></p>
<blockquote>
<p>这样我们的爬虫基本就完工了，下面我们来做一些其他的事情。<br>首先是对于网站的压力应对，我们现在写的是一个小爬虫，对网站不能造成什么压力，而且是单线爬虫，如果以后写多线程和爬取的内容多的时候，难免造成对网站的请求过于平凡，很多时候爬虫就会被服务器封杀掉，这时我们就要限制爬虫的速度了。<br>我们先来导入一个模块</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbGUU.png" alt="gbGUU.png"></p>
<blockquote>
<p>然后在每次下载完成的时候让程序暂停一下，我这里设置的是1秒钟</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbJ5F.png" alt="gbJ5F.png"></p>
<blockquote>
<p>然后我们再来看看我们的爬虫，大家不知道有没有发现，我们下载的文章的保存名字似乎是一个递增的数字，那么我猜想可能是这个网站累计文章的篇数，为了证实这个猜想，我们到最后几页去看看。我们先来看看37页的html代码.</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbU29.png" alt="gbU29.png"></p>
<blockquote>
<p>这是我们发现我们用来命名文件的数字由4位数变成了3位数，又变成了2位数，我们这个时候在来看看我们的下载保存路径。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbavR.png" alt="gbavR.png"></p>
<blockquote>
<p>这时我们要注意到，如果文章命名的数字变成2位数的时候，命名的切片操作会把文章链接中的/符号也加进去，这时就会构成一个新的下载路径了，由于我们并没有这样的路径，所有程序就会报错。具体错误是没有一个这样的文件指向。这个是怎么样的情形大家可以自己去实验一下。下面我们就要解决这个问题，想办法把/替换掉或者去掉。我们当然可以用find找出最后的/的下标，再从下标加1的地方去执行命名，但是这样无疑会多写出几行代码来，而且每次都要去判断，之后命名的代码也要重写，这样似乎工作量就上去了。我们可以换一个想法来解决这个问题，比如说在原有的命名代码中，只要发现有/字符存在的，一律替换为空或者其他。下面我们来看一个函数。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbwK1.png" alt="gbwK1.png"></p>
<blockquote>
<p>字符串的replace函数可以将字符串中的目标字符替换成其他的字符，这时我们来这样写。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbBb6.png" alt="gbBb6.png"></p>
<blockquote>
<p>就这样，我们就可以轻松的把我们切片中的/给去掉了我们运行一下看看是否可以下载。先看看目录下面有什么。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gby5D.png" alt="gby5D.png"></p>
<blockquote>
<p>这些都是上一次我们下载的东西，我们删除掉。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbcPe.png" alt="gbcPe.png"></p>
<blockquote>
<p>现在目录已经是空的了，我们现在开始下载试试。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbsUO.png" alt="gbsUO.png"></p>
<blockquote>
<p>一堆end之后我们的文件下载好了，我们去看看.</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbg8H.png" alt="gbg8H.png"></p>
<blockquote>
<p>一大堆的文件，我们看看数量</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gbrVK.png" alt="gbrVK.png"></p>
<blockquote>
<p>372个，刚好对应了372篇文章。就这样，我们就完成了一个定制的爬虫。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> python爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python,爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三个步骤搞定一个爬虫（2）]]></title>
      <url>/2017/11/19/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>第一篇文章写了怎么去获取一篇文章，这一篇文章就写写怎么把一页中的10篇文章全部获取到。<br><a id="more"></a></p>
</blockquote>
<h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="获取其他链接"><a href="#获取其他链接" class="headerlink" title="获取其他链接"></a>获取其他链接</h3><blockquote>
<p>上一次我说了怎么去获取第一条的文章链接，现在我们再来爬取本页后面剩下的链接。我们先来看看上次我们爬取链接用的代码。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/g7cdO.png" alt="g7cdO.png"></p>
<blockquote>
<p>获取后面的链接我们能不能如法炮制呢，我们先来试试。我们把代码写成下面那样</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/g74SA.png" alt="g74SA.png"></p>
<blockquote>
<p>然后我们现在来试试</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/g77ef.png" alt="g77ef.png"></p>
<blockquote>
<p>结果我们发现我们试图获取的三条链接都是一样的，可以看出，这还是本页的第一篇文章的链接。证明我们这种方法是不可行的。我们回想一下上一节课我们讲的定位链接使用函数。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/g7vSs.png" alt="g7vSs.png"></p>
<blockquote>
<p>就是这个find函数，我们看看帮助，我们发现了我们可以自定义开始寻找的下标和寻找结束的下标。我们从html里面发现我们想要爬取的链接相隔都不是很远，都处在同一个div下面。于是我们来试试，从第一条链接后面开始寻找第二条链接。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/g7xln.png" alt="g7xln.png"></p>
<blockquote>
<p>这里我们要注意后面两条代码，我们选择了开始的下标是从上一条链接的尾部开始的。现在我们来试试是否可以获取正确的链接。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/g7zyq.png" alt="g7zyq.png"></p>
<blockquote>
<p>现在我们获取到了三条不同的链接，我们再通过对比html来看看我是否获取的是正确的链接。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHSO0.png" alt="gHSO0.png"></p>
<blockquote>
<p>从结果来看，我们的代码成功的获取了本页的前几篇文章的链接。关于怎么获取剩下的链接我们应该有头绪了。当然，这里一页只有10篇文章，也就是只有10个链接，我们可以把我们的获取链接的代码复制10次，可是如果一页有20篇，30篇，50甚至是100篇呢，难道我们也要将代码复制那么多的次数，肯定不能，也不科学。很多人现在已经知道要用循环来做了，但是这个要怎么循环，从哪里循环呢？我们再来看看我们上面的代码，我们发现除了第一条链接获取的代码不一样，后面两条链接获取的代码都是一样的，这时我们就知道我们应该从第二条链接获取代码进行循环了。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gH9mV.png" alt="gH9mV.png"></p>
<blockquote>
<p>这里我们要先定义一个列表对获取的链接进行存储，因为是10篇文章，所以这里定义的就是一个10个元素的空的字符串列表。下面是我们循环的代码块。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHPTU.png" alt="gHPTU.png"></p>
<blockquote>
<p>这里结束一下我们为什么不是从0开始进行赋值，大家注意到没有，我们是从第二条文章链接看是循环的，那么第一条的文章链接在哪呢？当然是存储在了列表的第一个位置，也就是下标为0的那个位置了，关于range后面的范围，大家知道是包下不包上的就行了，就是说在range（x，y）的循环中，循环是从x开始，到y-1结束的，不包括y本身。我们现在来运行一下我们的代码看看是否获取的是正确的链接。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHAfJ.png" alt="gHAfJ.png"></p>
<blockquote>
<p>然后再次对比html</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHZlR.png" alt="gHZlR.png"></p>
<blockquote>
<p>这时我们发现我们获取了链接是正确的，那么我们就要开始进行下载了。还是上一节课的代码，不过我们进行修改一些地方。因为上次只是单个链接，这次我们有一个链接列表，所以我们应该采取循环进行下载。我们要对下载重新写一个循环了。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHmOx.png" alt="gHmOx.png">)</p>
<blockquote>
<p>我们现在来试试，这是上一节课我们成功下载的第一篇文章。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gH3fH.png" alt="gH3fH.png"></p>
<blockquote>
<p>我们现在删掉他。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHtXt.png" alt="gHtXt.png"></p>
<blockquote>
<p>现在我们看到文件夹里面是什么都没有的，我们现在开始下载。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHUnP.png" alt="gHUnP.png"></p>
<blockquote>
<p>我们这就下载完了，我打开其中一个看看。<font color="#800080">还是注意地址栏上面的链接。</font></p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/19/gHspj.png" alt="gHspj.png"><br><img src="https://s1.ax1x.com/2017/11/19/gHDhQ.png" alt="gHDhQ.png"></p>
<blockquote>
<p>可以看出我们获取的文章是正确的。因为篇幅有限，我就不一个一个去打开截图了，大家自己可以根据自己实际环境敲一下代码。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> python爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python,爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三个步骤搞定一个爬虫（1）]]></title>
      <url>/2017/11/18/%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E6%90%9E%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这篇文章算是我刚刚开始学爬虫的时候写的一个笔记了，现在整理出来，也算是一个分享过程吧。爬虫总体归纳来说就是三个步骤，获取网页源码，定位信息，提取保存信息，我们一个一个来说。</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a><strong>什么是爬虫</strong></h2><blockquote>
<p>我们都用过搜索引擎，嗯，就是Google，百度，必应之类的东西，我们为什么可以在上面搜索出东西来就是因为他们有爬虫程序在后台帮他们收集数据。就像我们要从网上获取数据我们就要去浏览网页，爬虫就是充当了一个浏览网页的机器人，将获取到的信息返回给自己的服务器。</p>
</blockquote>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h2><blockquote>
<p>从网页上获取一篇文章</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>其实我们不必对爬虫感到很神秘，毕竟我们每天都在用的东西。爬虫其实本质上就是在模拟用户的浏览行为，只要我们抓住这一点的话我们就可以围绕这点来展开了。用户浏览网页首先是要打开网页，再从网页上面获取到自己需要的信息，我们可以用爬虫来完成这一行为。</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>尝试获取到网页的源码，再从中提取数据。</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h2><blockquote>
<p>因为本人一直对推理悬疑比较感兴趣，所以这次爬取的网站也是平时看一些悬疑故事的网站，同时也是因为这个网站在编码上面和一些大网站的博客不同，并不那么规范，所以对于初学者还是有一定的挑战性的。演示系统用的是kali，因为懒得去配置各种py模块了，就利用系统已经配置好的，浏览器是firefox，使用的IDE是微软的vscode。python版本为2.7</p>
</blockquote>
<h3 id="查看robots-txt"><a href="#查看robots-txt" class="headerlink" title="查看robots.txt"></a>查看robots.txt</h3><blockquote>
<p>首先我们选取了我们要爬取的网站<a href="http://tuilixue.com/，先检查一下robots.txt看看是否存在有一些反爬虫的信息。" target="_blank" rel="external">http://tuilixue.com/，先检查一下robots.txt看看是否存在有一些反爬虫的信息。</a></p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/gczsH.png" alt="gczsH.png"></p>
<blockquote>
<p>很好，这里没有什么限制</p>
</blockquote>
<h3 id="查看目标"><a href="#查看目标" class="headerlink" title="查看目标"></a>查看目标</h3><blockquote>
<p>然后我们到我平时比较常去的板块看看，<a href="http://tuilixue.com/zhentantuilizhishi/list_4_1.html" target="_blank" rel="external">http://tuilixue.com/zhentantuilizhishi/list_4_1.html</a><br>我们现在想要爬取的文章就是这样的</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/gg9eA.png" alt="gg9eA.png"></p>
<blockquote>
<p>右击鼠标查看源代码，我们可以看到，我们想要爬取的链接就是这样的</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggCdI.png" alt="ggCdI.png"></p>
<blockquote>
<p>来一张清晰的</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggSLd.png" alt="ggSLd.png"></p>
<h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a><strong>开始工作</strong></h2><h3 id="获取网页源码"><a href="#获取网页源码" class="headerlink" title="获取网页源码"></a>获取网页源码</h3><blockquote>
<p>但是我们要怎么办才能使python得到这个网页的源代码呢？我们可以使用python的urllib模块提供的open方法，首先我们先新建一个py文件，惯例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment">#!usr/bin/python</span></div></pre></td></tr></table></figure></p>
<p>因为是linux系统，所以python路径不同于windows，第一行代码说明是用的uft-8进行编码</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggPot.png" alt="ggPot.png"></p>
<blockquote>
<p>在这里我们要先导入urllib这个模块，使用import导入。这里其实是两个方法，一个open一个read，open用于从网站上获取网页代码，read是为了读出来好打印。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggkJf.png" alt="ggkJf.png"></p>
<blockquote>
<p>我们可以得到上面结果，但是我们发现字符似乎成了乱码，为了找到原因，我们再来看看源码。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggFFP.png" alt="ggFFP.png"></p>
<blockquote>
<p>我们似乎找到了原因，网页使用的是gb2312进行编码的，但是我们是使用utf-8的，所以导致的乱码，对这方面不解的同学可以去找一些编码的知识看看。下面我们用一个编码转换来尝试获取正确的编码。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggAW8.png" alt="ggAW8.png"></p>
<blockquote>
<p>这时可以看到，我们通过强制的编码将获取的网页重新通过gb2312进行编码，我们就可以看到正确的字符了，但是在我们的这次课中并不需要这样的转码，这里只是为了显示获取的是正确的网页，从图中看到，我们获取的正是我们需要进行爬取的页面。</p>
</blockquote>
<h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><blockquote>
<p>下一步，我们需要获取我们本页的所有的文章链接了，这里需要有一点html和css的知识，关于这部分的知识，大家自己去掌握就行了，不需要太深入。如图中显示的，href后面的就是我们在本次课中需要爬取的链接，每页都有10篇文章是我们需要爬取的，我们先从第一篇的链接开始。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggVSS.png" alt="ggVSS.png"></p>
<blockquote>
<p>这时候我们就要想我们应该怎么样去获取到这个页面的链接了，如果正则表达式好的同学应该是想到了采取正则表达式进行获取，但是这里有一个问题，一个html页面中有如此多的a开头的元素，也有如此多的href开头的元素，想要通过正则去定位还是有点难的，就算定位出来，也是一大堆的代码，这就不利于可读性了。这时我们应该再从html文本中去分析。我们使用type函数进行类型的判断。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggZQg.png" alt="ggZQg.png"></p>
<blockquote>
<p>通过对pageContent的类型分析，我们知道这是一个字符串类型，这样我们就可以使用字符串中的find函数了，我们需要对find函数有一个了解。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggeyQ.png" alt="ggeyQ.png"></p>
<blockquote>
<p>函数中说明了从字符串中寻找目标字符，返回找到的第一个下标，如果没有找到就返回-1,同时可以设置开始寻找的位置和结束的位置。我们再看到文本。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggmLj.png" alt="ggmLj.png"></p>
<blockquote>
<p>我们发现是在div class=“liszw”下的li元素中的a元素中含有我们需要的链接，这时我们一个个来分析。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggues.png" alt="ggues.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggKwn.png" alt="ggKwn.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggMoq.png" alt="ggMoq.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/gglF0.png" alt="gglF0.png"><br></p>
<blockquote>
<p>这时我们发现这和我们所要爬取的链接数量上是完全吻合的。我们就来试试。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/gg1YV.png" alt="gg1YV.png"></p>
<blockquote>
<p>这里我们采取了一个切片操作，这时我们发现链接其实已经爬取到了，但是还是有些不完美，我们再来完善一下他。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/gg3WT.png" alt="gg3WT.png"></p>
<blockquote>
<p>我们来对比一下我们的网页上的第一个链接</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggGSU.png" alt="ggGSU.png"></p>
<h3 id="保存信息"><a href="#保存信息" class="headerlink" title="保存信息"></a>保存信息</h3><blockquote>
<p>这样我们就成功的爬取了第一个链接，现在我们来准备下载第一篇文章。从前面我们可以知道，我们可以把网页通过python的urllib模块下载下来，那么同样的道理，我一样也可以通过urllib模块对文章进行下载。我们通过链接的最后一串数字对下载下来的文件进行命名。并在下载玩后打印end进行提示。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggJlF.png" alt="ggJlF.png"></p>
<blockquote>
<p>我们可以看到，路径下是没有文件的。现在我们开始下载。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggYy4.png" alt="ggYy4.png"></p>
<blockquote>
<p>从这里看我们的文件应该是下载成功了，我们去文件路径下面看看。</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggtOJ.png" alt="ggtOJ.png"></p>
<blockquote>
<p>文件下载是成功了，我们来打开看看。<font color="#800080">这个地方要注意地址栏的链接</font></p>
</blockquote>
<p><img src="https://s1.ax1x.com/2017/11/18/ggUm9.png" alt="ggUm9.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggawR.png" alt="ggawR.png"><br><br><img src="https://s1.ax1x.com/2017/11/18/ggdT1.png" alt="ggdT1.png"><br></p>
<blockquote>
<p>这样，通过三个步骤，我们的爬虫就已经完成了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> python爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python,爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇文章]]></title>
      <url>/2017/11/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>其实第一篇文章也不知道说什么好，简单的就说说搞博客的这件事吧。</p>
<a id="more"></a>
<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a><strong>第一篇文章</strong></h2><blockquote>
<p>其实第一篇文章也不知道说什么好，之前对前端的知识只是掌握了一点HTML+CSS，其他的不会太多，也没有用Markdown语法写过什么东西，这是第一次尝试，这第一篇文章就当作是一个test吧，因为我也不知道有什么效果。因为第一篇文章，我也想随便写点什么东西，简单的就说说搞博客的这件事吧。</p>
</blockquote>
<h2 id="来说说为什么开个博客"><a href="#来说说为什么开个博客" class="headerlink" title="来说说为什么开个博客"></a><strong>来说说为什么开个博客</strong></h2><blockquote>
<p>这个问题其实也很好解释，朋友圈已经沦陷了，成了微商和投票专用的通告栏，还成为了七大姑八大姨八卦的云聊天室，所以个人微信上已经不怎么用了。<br>关于QQ空间这个其实和微信的朋友圈差不多，成了卖东西的地方和鸡汤遍地之所，而且朋友们很多都已经不玩QQ空间了，而且空间也并不是一个开放的地方，同时很多敏感的代码会被和谐掉，所以形同鸡肋。而且朋友中搞这个的人并不太多，交流还是少的。<br></p>
</blockquote>
<h2 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a><strong>关于hexo</strong></h2><blockquote>
<p>hexo的好处有很多，什么简单啊，可以免费使用github的空间之类的，这些文章网上有很多了，一搜就能够搜到一大堆，其中不乏大牛的源码分析，我也写不出什么东西来。只能说选这个静态博客框架纯粹是因为自己懒，不想去搞服务器也不想去配置什么东西了，而且别到时候没有续费就把东西全部清理掉了那才是坑，也不想到别的什么博客平台去注册什么账号的，因为很有可能自己写的文章就突然间不见了，就想着简简单单的写点东西，第一个算是自己在学习的路上做个笔记，第二个也是可以分享出来给大家看，技术这点东西其实没什么可以隐瞒的，不过你学得比人家多你就知道一些人家暂时还不知道的东西而已，多分享一下自己踩过的坑，后面的人的路就会顺一点。同时也是督促自己要去学习吧，毕竟博客总不更新会觉得怪怪的，说我好学也好，装哔也罢，不动脑不动笔写点东西，整个人都快生锈了。</p>
</blockquote>
<h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a><strong>关于博客</strong></h2><blockquote>
<p>开个博客总要写点什么吧，其实我也不太清楚最后这个博客会变成什么样子，慢慢写的，自己学到什么东西就写点什么东西吧，不过总的来说应该都是python方面的学习笔记，偶尔会有点经济学，经济行为学和心理学与管理学方面的文章穿插进来。就这样吧，像背景音乐中的一句，就老去吧，孤独别醒来，你渴望的离开，只是无处停摆。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
